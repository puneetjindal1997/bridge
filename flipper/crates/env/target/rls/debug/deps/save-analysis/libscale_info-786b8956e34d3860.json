{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1","program":"/home/user/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","scale_info","--edition=2021","/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bitvec\"","--cfg","feature=\"decode\"","--cfg","feature=\"derive\"","--cfg","feature=\"scale-info-derive\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=786b8956e34d3860","-C","extra-filename=-786b8956e34d3860","--out-dir","/data/bridge/flipper/crates/env/target/rls/debug/deps","-L","dependency=/data/bridge/flipper/crates/env/target/rls/debug/deps","--extern","bitvec=/data/bridge/flipper/crates/env/target/rls/debug/deps/libbitvec-c0815ed01ff471a1.rmeta","--extern","cfg_if=/data/bridge/flipper/crates/env/target/rls/debug/deps/libcfg_if-2c7724008976718a.rmeta","--extern","derive_more=/data/bridge/flipper/crates/env/target/rls/debug/deps/libderive_more-1fce02432dbe641a.so","--extern","scale=/data/bridge/flipper/crates/env/target/rls/debug/deps/libparity_scale_codec-daefc4f737b1d23b.rmeta","--extern","scale_info_derive=/data/bridge/flipper/crates/env/target/rls/debug/deps/libscale_info_derive-232a333b8d9c9a71.so","--extern","serde=/data/bridge/flipper/crates/env/target/rls/debug/deps/libserde-6dfdae88ad460b27.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/user/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/data/bridge/flipper/crates/env/target/rls/debug/deps/libscale_info-786b8956e34d3860.rmeta"},"prelude":{"crate_id":{"name":"scale_info","disambiguator":[16575797958897277330,0]},"crate_root":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src","external_crates":[{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","num":20,"id":{"name":"cfg_if","disambiguator":[3771446270907224645,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","num":21,"id":{"name":"serde","disambiguator":[373097084773058157,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","num":22,"id":{"name":"serde_derive","disambiguator":[3938953606297691061,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","num":23,"id":{"name":"parity_scale_codec","disambiguator":[1894304188854438066,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","num":24,"id":{"name":"parity_scale_codec_derive","disambiguator":[7055540601628545636,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","num":25,"id":{"name":"byte_slice_cast","disambiguator":[9733089393729035916,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","num":26,"id":{"name":"arrayvec","disambiguator":[17570390050859790690,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","num":27,"id":{"name":"derive_more","disambiguator":[16148454599286226947,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","num":28,"id":{"name":"scale_info_derive","disambiguator":[2362823686225402918,0]}}],"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":612,"byte_end":13556,"line_start":15,"line_end":393,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":3737},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14443,"byte_end":14446,"line_start":27,"line_end":27,"column_start":13,"column_end":16},"alias_span":null,"name":"any","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":624},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14460,"byte_end":14466,"line_start":28,"line_end":28,"column_start":13,"column_end":19},"alias_span":null,"name":"borrow","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":191},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14480,"byte_end":14485,"line_start":29,"line_end":29,"column_start":13,"column_end":18},"alias_span":null,"name":"boxed","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":2673},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14499,"byte_end":14502,"line_start":30,"line_end":30,"column_start":13,"column_end":16},"alias_span":null,"name":"cmp","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":1099},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14516,"byte_end":14527,"line_start":31,"line_end":31,"column_start":13,"column_end":24},"alias_span":null,"name":"collections","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":4445},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14541,"byte_end":14544,"line_start":32,"line_end":32,"column_start":13,"column_end":16},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":6},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14558,"byte_end":14564,"line_start":33,"line_end":33,"column_start":13,"column_end":19},"alias_span":null,"name":"format","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":9738},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14578,"byte_end":14582,"line_start":34,"line_end":34,"column_start":13,"column_end":17},"alias_span":null,"name":"hash","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":3008},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14596,"byte_end":14602,"line_start":35,"line_end":35,"column_start":13,"column_end":19},"alias_span":null,"name":"marker","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":1832},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14616,"byte_end":14619,"line_start":36,"line_end":36,"column_start":13,"column_end":16},"alias_span":null,"name":"mem","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":5558},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14633,"byte_end":14636,"line_start":37,"line_end":37,"column_start":13,"column_end":16},"alias_span":null,"name":"num","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":3089},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14650,"byte_end":14653,"line_start":38,"line_end":38,"column_start":13,"column_end":16},"alias_span":null,"name":"ops","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":5446},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14667,"byte_end":14673,"line_start":39,"line_end":39,"column_start":13,"column_end":19},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":6303},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14687,"byte_end":14690,"line_start":40,"line_end":40,"column_start":13,"column_end":16},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":5},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14687,"byte_end":14690,"line_start":40,"line_end":40,"column_start":13,"column_end":16},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":6}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":66029,"byte_end":66030,"line_start":47,"line_end":47,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"TypeDefComposite","parent":{"krate":0,"index":546}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":66044,"byte_end":66045,"line_start":48,"line_end":48,"column_start":13,"column_end":14},"alias_span":null,"name":"*","value":"Field","parent":{"krate":0,"index":546}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":66057,"byte_end":66058,"line_start":49,"line_end":49,"column_start":11,"column_end":12},"alias_span":null,"name":"*","value":"Path","parent":{"krate":0,"index":546}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":66073,"byte_end":66074,"line_start":50,"line_end":50,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"TypeDefVariant, Variant","parent":{"krate":0,"index":546}},{"kind":"Use","ref_id":{"krate":23,"index":0},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12134,"byte_end":12139,"line_start":346,"line_end":346,"column_start":9,"column_end":14},"alias_span":null,"name":"scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1482},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12173,"byte_end":12181,"line_start":349,"line_end":349,"column_start":16,"column_end":24},"alias_span":null,"name":"MetaType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":517},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12207,"byte_end":12219,"line_start":351,"line_end":351,"column_start":9,"column_end":21},"alias_span":null,"name":"IntoPortable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2980},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12229,"byte_end":12245,"line_start":352,"line_end":352,"column_start":9,"column_end":25},"alias_span":null,"name":"PortableRegistry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3002},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12255,"byte_end":12263,"line_start":353,"line_end":353,"column_start":9,"column_end":17},"alias_span":null,"name":"Registry","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12280,"byte_end":12281,"line_start":355,"line_end":355,"column_start":9,"column_end":10},"alias_span":null,"name":"*","value":"TypeDefSequence, Variant, TypeDef, TypeDefCompact, TypeDefTuple, TypeParameter, Type, TypeDefComposite, TypeDefPrimitive, Path, TypeDefVariant, Field, TypeDefArray","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":28,"index":273},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12341,"byte_end":12349,"line_start":359,"line_end":359,"column_start":28,"column_end":36},"alias_span":null,"name":"TypeInfo","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":612,"byte_end":13556,"line_start":15,"line_end":393,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":169},{"krate":0,"index":193},{"krate":0,"index":386},{"krate":0,"index":426},{"krate":0,"index":479},{"krate":0,"index":546},{"krate":0,"index":910},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":934},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":940}],"decl_id":null,"docs":" Efficient and space-efficient serialization of Rust types.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":655,"byte_end":677,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"/ Efficient and space-efficient serialization of Rust types.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":679,"byte_end":741,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":742,"byte_end":745,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This library provides structures to easily retrieve compile-time type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":746,"byte_end":819,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ information at runtime and also to serialize this information in a","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":820,"byte_end":890,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ space-efficient form, aka `PortableForm`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":891,"byte_end":936,"line_start":22,"line_end":22,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":937,"byte_end":940,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Registry","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":941,"byte_end":955,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":956,"byte_end":959,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ At the heart of its functionality is the [`Registry`](`crate::Registry`)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":960,"byte_end":1036,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ that acts as a cache for known types in order to efficiently deduplicate","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1037,"byte_end":1113,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ types and ensure a space-efficient serialization.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1114,"byte_end":1167,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1168,"byte_end":1171,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Type Information","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1172,"byte_end":1194,"line_start":30,"line_end":30,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1195,"byte_end":1198,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Information about types is provided via the [`TypeInfo`](`crate::TypeInfo`)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1199,"byte_end":1278,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ trait.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1279,"byte_end":1289,"line_start":33,"line_end":33,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1290,"byte_end":1293,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This trait should be implemented for all types that are serializable.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1294,"byte_end":1367,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ `scale-info` provides implementations for all commonly used Rust standard","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1368,"byte_end":1445,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ types and a derive macro for implementing of custom types.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1446,"byte_end":1508,"line_start":37,"line_end":37,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1509,"byte_end":1512,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Deriving `TypeInfo`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1513,"byte_end":1539,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1540,"byte_end":1543,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Enable the `derive` feature of this crate:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1544,"byte_end":1590,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1591,"byte_end":1594,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1595,"byte_end":1606,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ scale-info = { version = \"2.0.0\", features = [\"derive\"] }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1607,"byte_end":1668,"line_start":44,"line_end":44,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1669,"byte_end":1676,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1677,"byte_end":1680,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1681,"byte_end":1694,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/ use scale_info::TypeInfo;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1695,"byte_end":1724,"line_start":48,"line_end":48,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1725,"byte_end":1728,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1729,"byte_end":1752,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ struct MyStruct {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1753,"byte_end":1774,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/     a: u32,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1775,"byte_end":1790,"line_start":52,"line_end":52,"column_start":1,"column_end":16}},{"value":"/     b: MyEnum,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1791,"byte_end":1809,"line_start":53,"line_end":53,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1810,"byte_end":1815,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1816,"byte_end":1819,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1820,"byte_end":1843,"line_start":56,"line_end":56,"column_start":1,"column_end":24}},{"value":"/ enum MyEnum {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1844,"byte_end":1861,"line_start":57,"line_end":57,"column_start":1,"column_end":18}},{"value":"/     A(bool),","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1862,"byte_end":1878,"line_start":58,"line_end":58,"column_start":1,"column_end":17}},{"value":"/     B { f: Vec<u8> },","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1879,"byte_end":1904,"line_start":59,"line_end":59,"column_start":1,"column_end":26}},{"value":"/     C,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1905,"byte_end":1915,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1916,"byte_end":1921,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1922,"byte_end":1929,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1930,"byte_end":1933,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ### Attributes","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1934,"byte_end":1952,"line_start":64,"line_end":64,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1953,"byte_end":1956,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ #### `#[scale_info(bounds(..))]`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1957,"byte_end":1993,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1994,"byte_end":1997,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Replace the auto-generated `where` clause bounds for the derived `TypeInfo` implementation.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":1998,"byte_end":2093,"line_start":68,"line_end":68,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2094,"byte_end":2097,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2098,"byte_end":2111,"line_start":70,"line_end":70,"column_start":1,"column_end":14}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2112,"byte_end":2135,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/ #[scale_info(bounds(T: TypeInfo + 'static))]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2136,"byte_end":2184,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ struct MyStruct<T> {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2185,"byte_end":2209,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     a: Vec<T>,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2210,"byte_end":2228,"line_start":74,"line_end":74,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2229,"byte_end":2234,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2235,"byte_end":2242,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2243,"byte_end":2246,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ The derive macro automatically adds `TypeInfo` bounds for all type parameters, and all field","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2247,"byte_end":2343,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"/ types containing type parameters or associated types.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2344,"byte_end":2401,"line_start":79,"line_end":79,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2402,"byte_end":2405,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This is naive and sometimes adds unnecessary bounds, since on a syntactical level there is no","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2406,"byte_end":2503,"line_start":81,"line_end":81,"column_start":1,"column_end":98}},{"value":"/ way to differentiate between a generic type constructor and a type alias with a generic argument","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2504,"byte_end":2604,"line_start":82,"line_end":82,"column_start":1,"column_end":101}},{"value":"/ e.g.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2605,"byte_end":2613,"line_start":83,"line_end":83,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2614,"byte_end":2617,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2618,"byte_end":2631,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/ trait MyTrait {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2632,"byte_end":2651,"line_start":86,"line_end":86,"column_start":1,"column_end":20}},{"value":"/     type A;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2652,"byte_end":2667,"line_start":87,"line_end":87,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2668,"byte_end":2673,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2674,"byte_end":2677,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ type MyAlias<T> = <T as MyTrait>::A;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2678,"byte_end":2718,"line_start":90,"line_end":90,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2719,"byte_end":2722,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2723,"byte_end":2746,"line_start":92,"line_end":92,"column_start":1,"column_end":24}},{"value":"/ struct MyStruct<T> {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2747,"byte_end":2771,"line_start":93,"line_end":93,"column_start":1,"column_end":25}},{"value":"/     a: MyAlias<T>,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2772,"byte_end":2794,"line_start":94,"line_end":94,"column_start":1,"column_end":23}},{"value":"/     b: Vec<T>,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2795,"byte_end":2813,"line_start":95,"line_end":95,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2814,"byte_end":2819,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2820,"byte_end":2827,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2828,"byte_end":2831,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ So for the above, since a `MyAlias<T>: TypeInfo` bound is required, and we can't distinguish","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2832,"byte_end":2928,"line_start":99,"line_end":99,"column_start":1,"column_end":97}},{"value":"/ between `MyAlias<T>` and `Vec<T>`, then the `TypeInfo` bound is simply added for all","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":2929,"byte_end":3017,"line_start":100,"line_end":100,"column_start":1,"column_end":89}},{"value":"/ fields which contain any type param. In this case the redundant `Vec<T>: TypeInfo`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3018,"byte_end":3104,"line_start":101,"line_end":101,"column_start":1,"column_end":87}},{"value":"/ would be added.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3105,"byte_end":3124,"line_start":102,"line_end":102,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3125,"byte_end":3128,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ This is usually okay, but in some circumstances can cause problems, for example with the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3129,"byte_end":3221,"line_start":104,"line_end":104,"column_start":1,"column_end":93}},{"value":"/ [`overflow evaluating the requirement`] error [here](https://github.com/paritytech/scale-info/blob/master/test_suite/tests/ui/pass_custom_bounds_fix_overflow.rs).","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3222,"byte_end":3388,"line_start":105,"line_end":105,"column_start":1,"column_end":167}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3389,"byte_end":3392,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ The `bounds` attribute provides an [\"escape hatch\"](https://serde.rs/attr-bound.html) to allow","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3393,"byte_end":3491,"line_start":107,"line_end":107,"column_start":1,"column_end":99}},{"value":"/ the programmer control of the `where` clause on the generated `impl`, to solve this and other","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3492,"byte_end":3589,"line_start":108,"line_end":108,"column_start":1,"column_end":98}},{"value":"/ issues that can't be foreseen by the auto-generated bounds heuristic.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3590,"byte_end":3663,"line_start":109,"line_end":109,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3664,"byte_end":3667,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ #### `#[scale_info(skip_type_params(..))]`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3668,"byte_end":3714,"line_start":111,"line_end":111,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3715,"byte_end":3718,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ Remove the requirement for the specified type params to implement `TypeInfo`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3719,"byte_end":3800,"line_start":113,"line_end":113,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3801,"byte_end":3804,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Consider a simple example of a type parameter which is used for associated types, but the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3805,"byte_end":3903,"line_start":115,"line_end":115,"column_start":1,"column_end":99}},{"value":"/ itself does not carry any type information. Consider this common pattern:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3904,"byte_end":3981,"line_start":116,"line_end":116,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3982,"byte_end":3985,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":3986,"byte_end":3999,"line_start":118,"line_end":118,"column_start":1,"column_end":14}},{"value":"/ trait Config {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4000,"byte_end":4018,"line_start":119,"line_end":119,"column_start":1,"column_end":19}},{"value":"/     type Balance;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4019,"byte_end":4040,"line_start":120,"line_end":120,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4041,"byte_end":4046,"line_start":121,"line_end":121,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4047,"byte_end":4050,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ struct Runtime; // doesn't implement `TypeInfo`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4051,"byte_end":4102,"line_start":123,"line_end":123,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4103,"byte_end":4106,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ impl Config for Runtime {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4107,"byte_end":4136,"line_start":125,"line_end":125,"column_start":1,"column_end":30}},{"value":"/     type Balance = u64;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4137,"byte_end":4164,"line_start":126,"line_end":126,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4165,"byte_end":4170,"line_start":127,"line_end":127,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4171,"byte_end":4174,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ #[allow(unused)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4175,"byte_end":4195,"line_start":129,"line_end":129,"column_start":1,"column_end":21}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4196,"byte_end":4219,"line_start":130,"line_end":130,"column_start":1,"column_end":24}},{"value":"/ #[scale_info(skip_type_params(T))]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4220,"byte_end":4258,"line_start":131,"line_end":131,"column_start":1,"column_end":39}},{"value":"/ struct A<T: Config> {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4259,"byte_end":4284,"line_start":132,"line_end":132,"column_start":1,"column_end":26}},{"value":"/     balance: T::Balance,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4285,"byte_end":4313,"line_start":133,"line_end":133,"column_start":1,"column_end":29}},{"value":"/     marker: core::marker::PhantomData<T>,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4314,"byte_end":4359,"line_start":134,"line_end":134,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4360,"byte_end":4365,"line_start":135,"line_end":135,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4366,"byte_end":4369,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ fn assert_type_info<T: scale_info::TypeInfo + 'static>() {}","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4370,"byte_end":4433,"line_start":137,"line_end":137,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4434,"byte_end":4437,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4438,"byte_end":4453,"line_start":139,"line_end":139,"column_start":1,"column_end":16}},{"value":"/     // without the `skip_type_params` attribute this will fail.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4454,"byte_end":4521,"line_start":140,"line_end":140,"column_start":1,"column_end":68}},{"value":"/     assert_type_info::<A<Runtime>>();","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4522,"byte_end":4563,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4564,"byte_end":4569,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4570,"byte_end":4577,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4578,"byte_end":4581,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ By default, the derived `TypeInfo` implementation will add the type of all type parameters to","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4582,"byte_end":4679,"line_start":145,"line_end":145,"column_start":1,"column_end":98}},{"value":"/ the `TypeParameter` specification e.g.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4680,"byte_end":4722,"line_start":146,"line_end":146,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4723,"byte_end":4726,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ `type_params(vec![TypeParameter::new(\"T\", Some(MetaType::new::<T>()))])`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4727,"byte_end":4803,"line_start":148,"line_end":148,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4804,"byte_end":4807,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ In the example above, this will cause a compiler error because `Runtime` is the concrete tyoe","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4808,"byte_end":4905,"line_start":150,"line_end":150,"column_start":1,"column_end":98}},{"value":"/ for `T`, which does not satisfy the `TypeInfo` requirement of `MetaType::new::<T>()`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4906,"byte_end":4995,"line_start":151,"line_end":151,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":4996,"byte_end":4999,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ Simply adding a `TypeInfo` derive to `Runtime` is one way of solving this, but that could be","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5000,"byte_end":5096,"line_start":153,"line_end":153,"column_start":1,"column_end":97}},{"value":"/ misleading (why does it need `TypeInfo` if a value of that type is never encoded?), and can","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5097,"byte_end":5192,"line_start":154,"line_end":154,"column_start":1,"column_end":96}},{"value":"/ sometimes require adding `TypeInfo` bounds in other impl blocks.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5193,"byte_end":5261,"line_start":155,"line_end":155,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5262,"byte_end":5265,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ The `skip_type_params` attribute solves this, providing an additional \"escape hatch\" which","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5266,"byte_end":5360,"line_start":157,"line_end":157,"column_start":1,"column_end":95}},{"value":"/ prevents the given type parameter's type information being required:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5361,"byte_end":5433,"line_start":158,"line_end":158,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5434,"byte_end":5437,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ `type_params(vec![TypeParameter::new(\"T\", None)])`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5438,"byte_end":5492,"line_start":160,"line_end":160,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5493,"byte_end":5496,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The generated type params do not now require `T` to implement `TypeInfo`, so the auto-generated","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5497,"byte_end":5596,"line_start":162,"line_end":162,"column_start":1,"column_end":100}},{"value":"/ bound is not added to the generated `TypeInfo` `where` clause.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5597,"byte_end":5663,"line_start":163,"line_end":163,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5664,"byte_end":5667,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ #### Combining `bounds` and `skip_type_params`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5668,"byte_end":5718,"line_start":165,"line_end":165,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5719,"byte_end":5722,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ These two attributes can complement one another, particularly in the case where using `bounds`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5723,"byte_end":5821,"line_start":167,"line_end":167,"column_start":1,"column_end":99}},{"value":"/ would still require manually adding a `TypeInfo` bound for the type parameter:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5822,"byte_end":5904,"line_start":168,"line_end":168,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5905,"byte_end":5908,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5909,"byte_end":5922,"line_start":170,"line_end":170,"column_start":1,"column_end":14}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5923,"byte_end":5946,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ #[scale_info(bounds(), skip_type_params(T))]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5947,"byte_end":5995,"line_start":172,"line_end":172,"column_start":1,"column_end":49}},{"value":"/ struct A<T> {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":5996,"byte_end":6013,"line_start":173,"line_end":173,"column_start":1,"column_end":18}},{"value":"/     marker: core::marker::PhantomData<T>,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6014,"byte_end":6059,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6060,"byte_end":6065,"line_start":175,"line_end":175,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6066,"byte_end":6073,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6074,"byte_end":6077,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ Without `skip_type_params` in the example above, it would require the `TypeInfo` bounds for `T`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6078,"byte_end":6177,"line_start":178,"line_end":178,"column_start":1,"column_end":100}},{"value":"/ to be added manually e.g. `#[scale_info(bounds(T: TypeInfo + 'static))]`. Since the intention of","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6178,"byte_end":6278,"line_start":179,"line_end":179,"column_start":1,"column_end":101}},{"value":"/ the empty bounds is to **remove** all type bounds, then the addition of `skip_type_params`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6279,"byte_end":6373,"line_start":180,"line_end":180,"column_start":1,"column_end":95}},{"value":"/ allows this to compile successfully.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6374,"byte_end":6414,"line_start":181,"line_end":181,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6415,"byte_end":6418,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ ##### Precedence","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6419,"byte_end":6439,"line_start":183,"line_end":183,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6440,"byte_end":6443,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ When used independently, both attributes modify the `where` clause of the derived `TypeInfo`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6444,"byte_end":6540,"line_start":185,"line_end":185,"column_start":1,"column_end":97}},{"value":"/ impl. When used together, the predicates supplied in the `bounds` attribute replaces *all*","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6541,"byte_end":6635,"line_start":186,"line_end":186,"column_start":1,"column_end":95}},{"value":"/ auto-generated bounds, and `skip_type_params` will have no effect on the resulting `where`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6636,"byte_end":6730,"line_start":187,"line_end":187,"column_start":1,"column_end":95}},{"value":"/ clause.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6731,"byte_end":6742,"line_start":188,"line_end":188,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6743,"byte_end":6746,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ **Note:** When using `bounds` without `skip_type_params`, it is therefore required to manually","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6747,"byte_end":6845,"line_start":190,"line_end":190,"column_start":1,"column_end":99}},{"value":"/ add a `TypeInfo` bound for any non skipped type parameters. The compiler will let you know.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6846,"byte_end":6941,"line_start":191,"line_end":191,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6942,"byte_end":6945,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ #### `#[scale_info(capture_docs = \"default|always|never\")]`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":6946,"byte_end":7009,"line_start":193,"line_end":193,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7010,"byte_end":7013,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ Docs for types, fields and variants can all be captured by the `docs` feature being enabled.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7014,"byte_end":7110,"line_start":195,"line_end":195,"column_start":1,"column_end":97}},{"value":"/ This can be overridden using the `capture_docs` attribute:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7111,"byte_end":7173,"line_start":196,"line_end":196,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7174,"byte_end":7177,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ `#[scale_info(capture_docs = \"default\")]` will capture docs iff the `docs` feature is enabled.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7178,"byte_end":7276,"line_start":198,"line_end":198,"column_start":1,"column_end":99}},{"value":"/ This is the default if `capture_docs` is not specified.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7277,"byte_end":7336,"line_start":199,"line_end":199,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7337,"byte_end":7340,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ `#[scale_info(capture_docs = \"always\")]` will capture docs for the annotated type even if the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7341,"byte_end":7438,"line_start":201,"line_end":201,"column_start":1,"column_end":98}},{"value":"/ `docs` feature is *not* enabled.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7439,"byte_end":7475,"line_start":202,"line_end":202,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7476,"byte_end":7479,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ `#[scale_info(capture_docs = \"never\")]` will *not* capture docs for the annotated type even if","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7480,"byte_end":7578,"line_start":204,"line_end":204,"column_start":1,"column_end":99}},{"value":"/ the `docs` is enabled.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7579,"byte_end":7605,"line_start":205,"line_end":205,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7606,"byte_end":7609,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This is useful e.g. when compiling metadata into a Wasm blob, and it is desirable to keep the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7610,"byte_end":7707,"line_start":207,"line_end":207,"column_start":1,"column_end":98}},{"value":"/ binary size as small as possible, so the `docs` feature would be disabled. In case the docs for","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7708,"byte_end":7807,"line_start":208,"line_end":208,"column_start":1,"column_end":100}},{"value":"/ some types is necessary they could be enabled on a per-type basis with the above attribute.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7808,"byte_end":7903,"line_start":209,"line_end":209,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7904,"byte_end":7907,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ #### `#[scale_info(crate = path::to::crate)]`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7908,"byte_end":7957,"line_start":211,"line_end":211,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7958,"byte_end":7961,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Specify a path to the scale-info crate instance to use when referring to the APIs from generated","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":7962,"byte_end":8062,"line_start":213,"line_end":213,"column_start":1,"column_end":101}},{"value":"/ code. This is normally only applicable when invoking re-exported scale-info derives from a public","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8063,"byte_end":8164,"line_start":214,"line_end":214,"column_start":1,"column_end":102}},{"value":"/ macro in a different crate. For example:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8165,"byte_end":8209,"line_start":215,"line_end":215,"column_start":1,"column_end":45}},{"value":"/ ```ignore","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8210,"byte_end":8223,"line_start":216,"line_end":216,"column_start":1,"column_end":14}},{"value":"/ use scale_info_reexport::info::TypeInfo;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8224,"byte_end":8268,"line_start":217,"line_end":217,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8269,"byte_end":8272,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8273,"byte_end":8296,"line_start":219,"line_end":219,"column_start":1,"column_end":24}},{"value":"/ #[scale_info(crate = scale_info_reexport::info)]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8297,"byte_end":8349,"line_start":220,"line_end":220,"column_start":1,"column_end":53}},{"value":"/ enum TestEnum {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8350,"byte_end":8369,"line_start":221,"line_end":221,"column_start":1,"column_end":20}},{"value":"/     FirstVariant,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8370,"byte_end":8391,"line_start":222,"line_end":222,"column_start":1,"column_end":22}},{"value":"/     SecondVariant,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8392,"byte_end":8414,"line_start":223,"line_end":223,"column_start":1,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8415,"byte_end":8420,"line_start":224,"line_end":224,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8421,"byte_end":8428,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8429,"byte_end":8432,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ # Forms","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8433,"byte_end":8444,"line_start":227,"line_end":227,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8445,"byte_end":8448,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ To bridge between compile-time type information and runtime the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8449,"byte_end":8516,"line_start":229,"line_end":229,"column_start":1,"column_end":68}},{"value":"/ [`MetaForm`](`crate::form::MetaForm`) is used to easily retrieve all","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8517,"byte_end":8589,"line_start":230,"line_end":230,"column_start":1,"column_end":73}},{"value":"/ information needed to uniquely identify types.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8590,"byte_end":8640,"line_start":231,"line_end":231,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8641,"byte_end":8644,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ The `MetaForm` and its associated `Registry` can be transformed into the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8645,"byte_end":8721,"line_start":233,"line_end":233,"column_start":1,"column_end":77}},{"value":"/ space-efficient form by the [`IntoPortable`](`crate::IntoPortable`) trait; it is","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8722,"byte_end":8806,"line_start":234,"line_end":234,"column_start":1,"column_end":85}},{"value":"/ used internally by the [`Registry`](`crate::Registry`) in order to convert","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8807,"byte_end":8885,"line_start":235,"line_end":235,"column_start":1,"column_end":79}},{"value":"/ the expanded types into their space-efficient form.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8886,"byte_end":8941,"line_start":236,"line_end":236,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8942,"byte_end":8945,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ # Symbols and Namespaces","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8946,"byte_end":8974,"line_start":238,"line_end":238,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8975,"byte_end":8978,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ To differentiate two types sharing the same name, namespaces are used.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":8979,"byte_end":9053,"line_start":240,"line_end":240,"column_start":1,"column_end":75}},{"value":"/ Commonly the namespace is equal to the one where the type has been defined","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9054,"byte_end":9132,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ in. For Rust prelude types such as [`Option`](`std::option::Option`) and","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9133,"byte_end":9209,"line_start":242,"line_end":242,"column_start":1,"column_end":77}},{"value":"/ [`Result`](`std::result::Result`) the root namespace (empty namespace) is","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9210,"byte_end":9287,"line_start":243,"line_end":243,"column_start":1,"column_end":78}},{"value":"/ used.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9288,"byte_end":9297,"line_start":244,"line_end":244,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9298,"byte_end":9301,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ To use this library simply use the [`MetaForm`](`crate::form::MetaForm`)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9302,"byte_end":9378,"line_start":246,"line_end":246,"column_start":1,"column_end":77}},{"value":"/ initially with your own data structures; make them generic over the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9379,"byte_end":9450,"line_start":247,"line_end":247,"column_start":1,"column_end":72}},{"value":"/ [`Form`](`crate::form::Form`) trait just as has been done in this crate with","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9451,"byte_end":9531,"line_start":248,"line_end":248,"column_start":1,"column_end":81}},{"value":"/ [`TypeInfo`](`crate::TypeInfo`) in order to get a simple implementation of","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9532,"byte_end":9610,"line_start":249,"line_end":249,"column_start":1,"column_end":79}},{"value":"/ [`IntoPortable`](`crate::IntoPortable`). Use a single instance of the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9611,"byte_end":9684,"line_start":250,"line_end":250,"column_start":1,"column_end":74}},{"value":"/ [`Registry`](`crate::Registry`) for compaction and provide this registry","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9685,"byte_end":9761,"line_start":251,"line_end":251,"column_start":1,"column_end":77}},{"value":"/ instance upon serialization.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9762,"byte_end":9794,"line_start":252,"line_end":252,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9795,"byte_end":9798,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ A usage example can be found in ink! here:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9799,"byte_end":9845,"line_start":254,"line_end":254,"column_start":1,"column_end":47}},{"value":"/ https://github.com/paritytech/ink/blob/master/abi/src/specs.rs","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":9846,"byte_end":9912,"line_start":255,"line_end":255,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":982},{"krate":0,"index":983}],"decl_id":null,"docs":" Exports from `std`, `core` and `alloc` crates.","sig":null,"attributes":[{"value":"/ Exports from `std`, `core` and `alloc` crates.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14170,"byte_end":14220,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14221,"byte_end":14224,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Guarantees a stable interface between `std` and `no_std` modes.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/prelude.rs","byte_start":14225,"byte_end":14292,"line_start":17,"line_end":17,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"build","qualname":"::build","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":86},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":108},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":131},{"krate":0,"index":137},{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":140},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":167}],"decl_id":null,"docs":" Builders for defining metadata for variant types (enums), and composite types (structs).\n They are designed to allow only construction of valid definitions.","sig":null,"attributes":[{"value":"/ Builders for defining metadata for variant types (enums), and composite types (structs).","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15670,"byte_end":15762,"line_start":15,"line_end":15,"column_start":1,"column_end":93}},{"value":"/ They are designed to allow only construction of valid definitions.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15763,"byte_end":15833,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15834,"byte_end":15837,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ In most cases we recommend using the `scale-info-derive` crate to auto generate the builder","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15838,"byte_end":15933,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ constructions.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15934,"byte_end":15952,"line_start":19,"line_end":19,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15953,"byte_end":15956,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15957,"byte_end":15971,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15972,"byte_end":15975,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Generic struct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15976,"byte_end":15997,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":15998,"byte_end":16005,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ # use scale_info::{build::Fields, type_params, MetaType, Path, Type, TypeInfo};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16006,"byte_end":16089,"line_start":25,"line_end":25,"column_start":1,"column_end":84}},{"value":"/ struct Foo<T> {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16090,"byte_end":16109,"line_start":26,"line_end":26,"column_start":1,"column_end":20}},{"value":"/     bar: T,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16110,"byte_end":16125,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/     data: u64,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16126,"byte_end":16144,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16145,"byte_end":16150,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16151,"byte_end":16154,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ impl<T> TypeInfo for Foo<T>","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16155,"byte_end":16186,"line_start":31,"line_end":31,"column_start":1,"column_end":32}},{"value":"/ where","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16187,"byte_end":16196,"line_start":32,"line_end":32,"column_start":1,"column_end":10}},{"value":"/     T: TypeInfo + 'static,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16197,"byte_end":16227,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16228,"byte_end":16233,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/     type Identity = Self;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16234,"byte_end":16263,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16264,"byte_end":16267,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     fn type_info() -> Type {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16268,"byte_end":16300,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         Type::builder()","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16301,"byte_end":16328,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/             .path(Path::new(\"Foo\", module_path!()))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16329,"byte_end":16384,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/             .type_params(type_params!(T))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16385,"byte_end":16430,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/             .composite(Fields::named()","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16431,"byte_end":16473,"line_start":41,"line_end":41,"column_start":1,"column_end":43}},{"value":"/                 .field(|f| f.ty::<T>().name(\"bar\").type_name(\"T\"))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16474,"byte_end":16544,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/                 .field(|f| f.ty::<u64>().name(\"data\").type_name(\"u64\"))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16545,"byte_end":16620,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/             )","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16621,"byte_end":16638,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16639,"byte_end":16648,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16649,"byte_end":16654,"line_start":46,"line_end":46,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16655,"byte_end":16662,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ ## Tuple struct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16663,"byte_end":16682,"line_start":48,"line_end":48,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16683,"byte_end":16690,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ # use scale_info::{build::Fields, MetaType, Path, Type, TypeInfo};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16691,"byte_end":16761,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ struct Foo(u32, bool);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16762,"byte_end":16788,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16789,"byte_end":16792,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ impl TypeInfo for Foo {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16793,"byte_end":16820,"line_start":53,"line_end":53,"column_start":1,"column_end":28}},{"value":"/     type Identity = Self;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16821,"byte_end":16850,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16851,"byte_end":16854,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/     fn type_info() -> Type {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16855,"byte_end":16887,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/         Type::builder()","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16888,"byte_end":16915,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/             .path(Path::new(\"Foo\", module_path!()))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16916,"byte_end":16971,"line_start":58,"line_end":58,"column_start":1,"column_end":56}},{"value":"/             .composite(Fields::unnamed()","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":16972,"byte_end":17016,"line_start":59,"line_end":59,"column_start":1,"column_end":45}},{"value":"/                 .field(|f| f.ty::<u32>().type_name(\"u32\"))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17017,"byte_end":17079,"line_start":60,"line_end":60,"column_start":1,"column_end":63}},{"value":"/                 .field(|f| f.ty::<bool>().type_name(\"bool\"))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17080,"byte_end":17144,"line_start":61,"line_end":61,"column_start":1,"column_end":65}},{"value":"/             )","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17145,"byte_end":17162,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17163,"byte_end":17172,"line_start":63,"line_end":63,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17173,"byte_end":17178,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17179,"byte_end":17186,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ ## Enum with fields","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17187,"byte_end":17210,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17211,"byte_end":17218,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ # use scale_info::{build::{Fields, Variants}, type_params, MetaType, Path, Type, TypeInfo, Variant};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17219,"byte_end":17323,"line_start":68,"line_end":68,"column_start":1,"column_end":105}},{"value":"/ enum Foo<T>{","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17324,"byte_end":17340,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"/     A(T),","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17341,"byte_end":17354,"line_start":70,"line_end":70,"column_start":1,"column_end":14}},{"value":"/     B { f: u32 },","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17355,"byte_end":17376,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/     C,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17377,"byte_end":17387,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17388,"byte_end":17393,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17394,"byte_end":17397,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ impl<T> TypeInfo for Foo<T>","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17398,"byte_end":17429,"line_start":75,"line_end":75,"column_start":1,"column_end":32}},{"value":"/ where","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17430,"byte_end":17439,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/     T: TypeInfo + 'static,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17440,"byte_end":17470,"line_start":77,"line_end":77,"column_start":1,"column_end":31}},{"value":"/ {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17471,"byte_end":17476,"line_start":78,"line_end":78,"column_start":1,"column_end":6}},{"value":"/     type Identity = Self;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17477,"byte_end":17506,"line_start":79,"line_end":79,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17507,"byte_end":17510,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/     fn type_info() -> Type {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17511,"byte_end":17543,"line_start":81,"line_end":81,"column_start":1,"column_end":33}},{"value":"/         Type::builder()","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17544,"byte_end":17571,"line_start":82,"line_end":82,"column_start":1,"column_end":28}},{"value":"/             .path(Path::new(\"Foo\", module_path!()))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17572,"byte_end":17627,"line_start":83,"line_end":83,"column_start":1,"column_end":56}},{"value":"/                .type_params(type_params!(T))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17628,"byte_end":17676,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"/             .variant(","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17677,"byte_end":17702,"line_start":85,"line_end":85,"column_start":1,"column_end":26}},{"value":"/                 Variants::new()","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17703,"byte_end":17738,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/                     .variant(\"A\", |v| v","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17739,"byte_end":17782,"line_start":87,"line_end":87,"column_start":1,"column_end":44}},{"value":"/                         .index(0)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17783,"byte_end":17820,"line_start":88,"line_end":88,"column_start":1,"column_end":38}},{"value":"/                         .fields(Fields::unnamed().field(|f| f.ty::<T>().type_name(\"T\")))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17821,"byte_end":17913,"line_start":89,"line_end":89,"column_start":1,"column_end":93}},{"value":"/                     )","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17914,"byte_end":17939,"line_start":90,"line_end":90,"column_start":1,"column_end":26}},{"value":"/                     .variant(\"B\", |v| v","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17940,"byte_end":17983,"line_start":91,"line_end":91,"column_start":1,"column_end":44}},{"value":"/                         .index(1)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":17984,"byte_end":18021,"line_start":92,"line_end":92,"column_start":1,"column_end":38}},{"value":"/                         .fields(Fields::named().field(|f| f.ty::<u32>().name(\"f\").type_name(\"u32\")))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18022,"byte_end":18126,"line_start":93,"line_end":93,"column_start":1,"column_end":105}},{"value":"/                     )","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18127,"byte_end":18152,"line_start":94,"line_end":94,"column_start":1,"column_end":26}},{"value":"/                     .variant_unit(\"A\", 2)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18153,"byte_end":18198,"line_start":95,"line_end":95,"column_start":1,"column_end":46}},{"value":"/             )","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18199,"byte_end":18216,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18217,"byte_end":18226,"line_start":97,"line_end":97,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18227,"byte_end":18232,"line_start":98,"line_end":98,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18233,"byte_end":18240,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ ## Enum without fields, aka C-style enums.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18241,"byte_end":18287,"line_start":100,"line_end":100,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18288,"byte_end":18295,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ # use scale_info::{build::{Fields, Variants}, MetaType, Path, Type, TypeInfo, Variant};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18296,"byte_end":18387,"line_start":102,"line_end":102,"column_start":1,"column_end":92}},{"value":"/ enum Foo {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18388,"byte_end":18402,"line_start":103,"line_end":103,"column_start":1,"column_end":15}},{"value":"/     A,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18403,"byte_end":18413,"line_start":104,"line_end":104,"column_start":1,"column_end":11}},{"value":"/     B,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18414,"byte_end":18424,"line_start":105,"line_end":105,"column_start":1,"column_end":11}},{"value":"/     C = 33,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18425,"byte_end":18440,"line_start":106,"line_end":106,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18441,"byte_end":18446,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18447,"byte_end":18450,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ impl TypeInfo for Foo {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18451,"byte_end":18478,"line_start":109,"line_end":109,"column_start":1,"column_end":28}},{"value":"/     type Identity = Self;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18479,"byte_end":18508,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18509,"byte_end":18512,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/     fn type_info() -> Type {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18513,"byte_end":18545,"line_start":112,"line_end":112,"column_start":1,"column_end":33}},{"value":"/         Type::builder()","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18546,"byte_end":18573,"line_start":113,"line_end":113,"column_start":1,"column_end":28}},{"value":"/             .path(Path::new(\"Foo\", module_path!()))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18574,"byte_end":18629,"line_start":114,"line_end":114,"column_start":1,"column_end":56}},{"value":"/             .variant(","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18630,"byte_end":18655,"line_start":115,"line_end":115,"column_start":1,"column_end":26}},{"value":"/                 Variants::new()","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18656,"byte_end":18691,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/                     .variant(\"A\", |v| v.index(1))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18692,"byte_end":18745,"line_start":117,"line_end":117,"column_start":1,"column_end":54}},{"value":"/                     .variant(\"B\", |v| v.index(2))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18746,"byte_end":18799,"line_start":118,"line_end":118,"column_start":1,"column_end":54}},{"value":"/                     .variant(\"C\", |v| v.index(33))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18800,"byte_end":18854,"line_start":119,"line_end":119,"column_start":1,"column_end":55}},{"value":"/             )","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18855,"byte_end":18872,"line_start":120,"line_end":120,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18873,"byte_end":18882,"line_start":121,"line_end":121,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18883,"byte_end":18888,"line_start":122,"line_end":122,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":18889,"byte_end":18896,"line_start":123,"line_end":123,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19210,"byte_end":19215,"line_start":145,"line_end":145,"column_start":9,"column_end":14},"name":"state","qualname":"::build::state","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" State types for type builders which require a Path.\n","sig":null,"attributes":[{"value":"/ State types for type builders which require a Path.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19146,"byte_end":19201,"line_start":144,"line_end":144,"column_start":1,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":53},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19299,"byte_end":19314,"line_start":147,"line_end":147,"column_start":14,"column_end":29},"name":"PathNotAssigned","qualname":"::build::state::PathNotAssigned","value":"pub enum PathNotAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" State where the builder has not assigned a Path to the type\n","sig":null,"attributes":[{"value":"/ State where the builder has not assigned a Path to the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19222,"byte_end":19285,"line_start":146,"line_end":146,"column_start":5,"column_end":68}}]},{"kind":"Enum","id":{"krate":0,"index":54},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19395,"byte_end":19407,"line_start":149,"line_end":149,"column_start":14,"column_end":26},"name":"PathAssigned","qualname":"::build::state::PathAssigned","value":"pub enum PathAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" State where the builder has assigned a Path to the type\n","sig":null,"attributes":[{"value":"/ State where the builder has assigned a Path to the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19322,"byte_end":19381,"line_start":148,"line_end":148,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":55},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19474,"byte_end":19485,"line_start":154,"line_end":154,"column_start":12,"column_end":23},"name":"TypeBuilder","qualname":"::build::TypeBuilder","value":"TypeBuilder {  }","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60}],"decl_id":null,"docs":" Builds a [`Type`](`crate::Type`)\n","sig":null,"attributes":[{"value":"/ Builds a [`Type`](`crate::Type`)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19414,"byte_end":19450,"line_start":152,"line_end":152,"column_start":1,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19451,"byte_end":19462,"line_start":153,"line_end":153,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19999,"byte_end":20003,"line_start":174,"line_end":174,"column_start":12,"column_end":16},"name":"path","qualname":"<TypeBuilder<state::PathNotAssigned>>::path","value":"pub fn path(Self, Path) -> TypeBuilder<state::PathAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Set the Path for the type\n","sig":null,"attributes":[{"value":"/ Set the Path for the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19958,"byte_end":19987,"line_start":173,"line_end":173,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20556,"byte_end":20563,"line_start":194,"line_end":194,"column_start":12,"column_end":19},"name":"variant","qualname":"<TypeBuilder<state::PathAssigned>>::variant","value":"pub fn variant(Self, Variants) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Construct a \"variant\" type i.e an `enum`\n","sig":null,"attributes":[{"value":"/ Construct a \"variant\" type i.e an `enum`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20500,"byte_end":20544,"line_start":193,"line_end":193,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20709,"byte_end":20718,"line_start":199,"line_end":199,"column_start":12,"column_end":21},"name":"composite","qualname":"<TypeBuilder<state::PathAssigned>>::composite","value":"pub fn composite<F>(Self, FieldsBuilder<F>) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Construct a \"composite\" type i.e. a `struct`\n","sig":null,"attributes":[{"value":"/ Construct a \"composite\" type i.e. a `struct`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20649,"byte_end":20697,"line_start":198,"line_end":198,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20925,"byte_end":20936,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"type_params","qualname":"<TypeBuilder<S>>::type_params","value":"pub fn type_params<I>(Self, I) -> Self where I: IntoIterator<Item =\nTypeParameter>","parent":null,"children":[],"decl_id":null,"docs":" Set the type parameters if it's a generic type\n","sig":null,"attributes":[{"value":"/ Set the type parameters if it's a generic type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20863,"byte_end":20913,"line_start":205,"line_end":205,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21434,"byte_end":21438,"line_start":224,"line_end":224,"column_start":12,"column_end":16},"name":"docs","qualname":"<TypeBuilder<S>>::docs","value":"pub fn docs(Self, &'static [&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Doc capture is not enabled via the \"docs\" feature so this is a no-op.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"docs\"))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21301,"byte_end":21330,"line_start":221,"line_end":221,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21335,"byte_end":21344,"line_start":222,"line_end":222,"column_start":5,"column_end":14}},{"value":"/ Doc capture is not enabled via the \"docs\" feature so this is a no-op.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21349,"byte_end":21422,"line_start":223,"line_end":223,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21613,"byte_end":21624,"line_start":229,"line_end":229,"column_start":12,"column_end":23},"name":"docs_always","qualname":"<TypeBuilder<S>>::docs_always","value":"pub fn docs_always(Self, &[&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the type documentation, always captured even if the \"docs\" feature is not enabled.\n","sig":null,"attributes":[{"value":"/ Set the type documentation, always captured even if the \"docs\" feature is not enabled.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21511,"byte_end":21601,"line_start":228,"line_end":228,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":78},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21790,"byte_end":21798,"line_start":236,"line_end":236,"column_start":10,"column_end":18},"name":"NoFields","qualname":"::build::NoFields","value":"pub enum NoFields { }","parent":null,"children":[],"decl_id":null,"docs":" A fields builder has no fields (e.g. a unit struct)\n","sig":null,"attributes":[{"value":"/ A fields builder has no fields (e.g. a unit struct)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21725,"byte_end":21780,"line_start":235,"line_end":235,"column_start":1,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":79},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21873,"byte_end":21884,"line_start":238,"line_end":238,"column_start":10,"column_end":21},"name":"NamedFields","qualname":"::build::NamedFields","value":"pub enum NamedFields { }","parent":null,"children":[],"decl_id":null,"docs":" A fields builder only allows named fields (e.g. a struct)\n","sig":null,"attributes":[{"value":"/ A fields builder only allows named fields (e.g. a struct)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21802,"byte_end":21863,"line_start":237,"line_end":237,"column_start":1,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":80},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21960,"byte_end":21973,"line_start":240,"line_end":240,"column_start":10,"column_end":23},"name":"UnnamedFields","qualname":"::build::UnnamedFields","value":"pub enum UnnamedFields { }","parent":null,"children":[],"decl_id":null,"docs":" A fields builder only allows unnamed fields (e.g. a tuple)\n","sig":null,"attributes":[{"value":"/ A fields builder only allows unnamed fields (e.g. a tuple)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21888,"byte_end":21950,"line_start":239,"line_end":239,"column_start":1,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":81},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22027,"byte_end":22033,"line_start":243,"line_end":243,"column_start":10,"column_end":16},"name":"Fields","qualname":"::build::Fields","value":"pub enum Fields { }","parent":null,"children":[],"decl_id":null,"docs":" Provides FieldsBuilder constructors\n","sig":null,"attributes":[{"value":"/ Provides FieldsBuilder constructors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":21978,"byte_end":22017,"line_start":242,"line_end":242,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22104,"byte_end":22108,"line_start":247,"line_end":247,"column_start":12,"column_end":16},"name":"unit","qualname":"<Fields>::unit","value":"pub fn unit() -> FieldsBuilder<NoFields>","parent":null,"children":[],"decl_id":null,"docs":" The type construct has no fields\n","sig":null,"attributes":[{"value":"/ The type construct has no fields","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22056,"byte_end":22092,"line_start":246,"line_end":246,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22257,"byte_end":22262,"line_start":252,"line_end":252,"column_start":12,"column_end":17},"name":"named","qualname":"<Fields>::named","value":"pub fn named() -> FieldsBuilder<NamedFields>","parent":null,"children":[],"decl_id":null,"docs":" Fields for a type construct with named fields\n","sig":null,"attributes":[{"value":"/ Fields for a type construct with named fields","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22196,"byte_end":22245,"line_start":251,"line_end":251,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22404,"byte_end":22411,"line_start":257,"line_end":257,"column_start":12,"column_end":19},"name":"unnamed","qualname":"<Fields>::unnamed","value":"pub fn unnamed() -> FieldsBuilder<UnnamedFields>","parent":null,"children":[],"decl_id":null,"docs":" Fields for a type construct with unnamed fields\n","sig":null,"attributes":[{"value":"/ Fields for a type construct with unnamed fields","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22341,"byte_end":22392,"line_start":256,"line_end":256,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":86},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22610,"byte_end":22623,"line_start":264,"line_end":264,"column_start":12,"column_end":25},"name":"FieldsBuilder","qualname":"::build::FieldsBuilder","value":"FieldsBuilder {  }","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89}],"decl_id":null,"docs":" Build a set of either all named (e.g. for a struct) or all unnamed (e.g. for a tuple struct)\n","sig":null,"attributes":[{"value":"/ Build a set of either all named (e.g. for a struct) or all unnamed (e.g. for a tuple struct)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22490,"byte_end":22586,"line_start":262,"line_end":262,"column_start":1,"column_end":97}},{"value":"must_use","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22587,"byte_end":22598,"line_start":263,"line_end":263,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22957,"byte_end":22965,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"name":"finalize","qualname":"<FieldsBuilder<T>>::finalize","value":"pub fn finalize(Self) -> Vec<Field<MetaForm>>","parent":null,"children":[],"decl_id":null,"docs":" Complete building and return the set of fields\n","sig":null,"attributes":[{"value":"/ Complete building and return the set of fields","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22895,"byte_end":22945,"line_start":279,"line_end":279,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":23330,"byte_end":23335,"line_start":295,"line_end":295,"column_start":12,"column_end":17},"name":"field","qualname":"<FieldsBuilder<NamedFields>>::field","value":"pub fn field<F>(Self, F) -> Self where F: Fn(FieldBuilder) ->\nFieldBuilder<field_state::NameAssigned, field_state::TypeAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Add a named field constructed using the builder.\n","sig":null,"attributes":[{"value":"/ Add a named field constructed using the builder.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":23266,"byte_end":23318,"line_start":294,"line_end":294,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":23727,"byte_end":23732,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"field","qualname":"<FieldsBuilder<UnnamedFields>>::field","value":"pub fn field<F>(Self, F) -> Self where F: Fn(FieldBuilder) ->\nFieldBuilder<field_state::NameNotAssigned, field_state::TypeAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Add an unnamed field constructed using the builder.\n","sig":null,"attributes":[{"value":"/ Add an unnamed field constructed using the builder.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":23660,"byte_end":23715,"line_start":308,"line_end":308,"column_start":5,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":103},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24066,"byte_end":24077,"line_start":322,"line_end":322,"column_start":9,"column_end":20},"name":"field_state","qualname":"::build::field_state","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"decl_id":null,"docs":" Type states for building a field.\n","sig":null,"attributes":[{"value":"/ Type states for building a field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24020,"byte_end":24057,"line_start":321,"line_end":321,"column_start":1,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":104},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24144,"byte_end":24159,"line_start":324,"line_end":324,"column_start":14,"column_end":29},"name":"NameNotAssigned","qualname":"::build::field_state::NameNotAssigned","value":"pub enum NameNotAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" A name has not been assigned to the field.\n","sig":null,"attributes":[{"value":"/ A name has not been assigned to the field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24084,"byte_end":24130,"line_start":323,"line_end":323,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":105},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24223,"byte_end":24235,"line_start":326,"line_end":326,"column_start":14,"column_end":26},"name":"NameAssigned","qualname":"::build::field_state::NameAssigned","value":"pub enum NameAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" A name has been assigned to the field.\n","sig":null,"attributes":[{"value":"/ A name has been assigned to the field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24167,"byte_end":24209,"line_start":325,"line_end":325,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":106},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24303,"byte_end":24318,"line_start":328,"line_end":328,"column_start":14,"column_end":29},"name":"TypeNotAssigned","qualname":"::build::field_state::TypeNotAssigned","value":"pub enum TypeNotAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" A type has not been assigned to the field.\n","sig":null,"attributes":[{"value":"/ A type has not been assigned to the field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24243,"byte_end":24289,"line_start":327,"line_end":327,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":107},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24382,"byte_end":24394,"line_start":330,"line_end":330,"column_start":14,"column_end":26},"name":"TypeAssigned","qualname":"::build::field_state::TypeAssigned","value":"pub enum TypeAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" A type has been assigned to the field.\n","sig":null,"attributes":[{"value":"/ A type has been assigned to the field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24326,"byte_end":24368,"line_start":329,"line_end":329,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":108},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24457,"byte_end":24469,"line_start":335,"line_end":335,"column_start":12,"column_end":24},"name":"FieldBuilder","qualname":"::build::FieldBuilder","value":"FieldBuilder {  }","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Construct a valid [`Field`].\n","sig":null,"attributes":[{"value":"/ Construct a valid [`Field`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24401,"byte_end":24433,"line_start":333,"line_end":333,"column_start":1,"column_end":33}},{"value":"must_use","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24434,"byte_end":24445,"line_start":334,"line_end":334,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25099,"byte_end":25102,"line_start":360,"line_end":360,"column_start":12,"column_end":15},"name":"new","qualname":"<FieldBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new FieldBuilder.\n","sig":null,"attributes":[{"value":"/ Create a new FieldBuilder.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25057,"byte_end":25087,"line_start":359,"line_end":359,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25253,"byte_end":25257,"line_start":367,"line_end":367,"column_start":12,"column_end":16},"name":"name","qualname":"<FieldBuilder<field_state::NameNotAssigned, T>>::name","value":"pub fn name(Self, &'static str) -> FieldBuilder<field_state::NameAssigned, T>","parent":null,"children":[],"decl_id":null,"docs":" Initialize the field name.\n","sig":null,"attributes":[{"value":"/ Initialize the field name.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25211,"byte_end":25241,"line_start":366,"line_end":366,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25639,"byte_end":25641,"line_start":380,"line_end":380,"column_start":12,"column_end":14},"name":"ty","qualname":"<FieldBuilder<N, field_state::TypeNotAssigned>>::ty","value":"pub fn ty<TY>(Self) -> FieldBuilder<N, field_state::TypeAssigned> where\nTY: TypeInfo + 'static + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Initialize the type of the field.\n","sig":null,"attributes":[{"value":"/ Initialize the type of the field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25590,"byte_end":25627,"line_start":379,"line_end":379,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":26042,"byte_end":26049,"line_start":394,"line_end":394,"column_start":12,"column_end":19},"name":"compact","qualname":"<FieldBuilder<N, field_state::TypeNotAssigned>>::compact","value":"pub fn compact<TY>(Self) -> FieldBuilder<N, field_state::TypeAssigned> where\nTY: scale::HasCompact + TypeInfo + 'static","parent":null,"children":[],"decl_id":null,"docs":" Initializes the type of the field as a compact type.\n","sig":null,"attributes":[{"value":"/ Initializes the type of the field as a compact type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25974,"byte_end":26030,"line_start":393,"line_end":393,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":26506,"byte_end":26515,"line_start":410,"line_end":410,"column_start":12,"column_end":21},"name":"type_name","qualname":"<FieldBuilder<N, T>>::type_name","value":"pub fn type_name(Self, &'static str) -> FieldBuilder<N, T>","parent":null,"children":[],"decl_id":null,"docs":" Initialize the type name of a field (optional).\n","sig":null,"attributes":[{"value":"/ Initialize the type name of a field (optional).","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":26443,"byte_end":26494,"line_start":409,"line_end":409,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27254,"byte_end":27258,"line_start":435,"line_end":435,"column_start":12,"column_end":16},"name":"docs","qualname":"<FieldBuilder<N, T>>::docs","value":"pub fn docs(Self, &'static [&'static str]) -> FieldBuilder<N, T>","parent":null,"children":[],"decl_id":null,"docs":" Doc capture is not enabled via the \"docs\" feature so this is a no-op.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"docs\"))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27121,"byte_end":27150,"line_start":432,"line_end":432,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27155,"byte_end":27164,"line_start":433,"line_end":433,"column_start":5,"column_end":14}},{"value":"/ Doc capture is not enabled via the \"docs\" feature so this is a no-op.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27169,"byte_end":27242,"line_start":434,"line_end":434,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27468,"byte_end":27479,"line_start":441,"line_end":441,"column_start":12,"column_end":23},"name":"docs_always","qualname":"<FieldBuilder<N, T>>::docs_always","value":"pub fn docs_always(Self, &'static [&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize the documentation of a field, always captured even if the \"docs\" feature is not\n enabled.\n","sig":null,"attributes":[{"value":"/ Initialize the documentation of a field, always captured even if the \"docs\" feature is not","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27345,"byte_end":27439,"line_start":439,"line_end":439,"column_start":5,"column_end":99}},{"value":"/ enabled.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27444,"byte_end":27456,"line_start":440,"line_end":440,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27831,"byte_end":27839,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"finalize","qualname":"<FieldBuilder<N, field_state::TypeAssigned>>::finalize","value":"pub fn finalize(Self) -> Field<MetaForm>","parent":null,"children":[],"decl_id":null,"docs":" Complete building and return a new [`Field`].\n","sig":null,"attributes":[{"value":"/ Complete building and return a new [`Field`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27770,"byte_end":27819,"line_start":453,"line_end":453,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":985},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28139,"byte_end":28147,"line_start":467,"line_end":467,"column_start":12,"column_end":20},"name":"Variants","qualname":"::build::Variants","value":"Variants {  }","parent":null,"children":[{"krate":0,"index":986}],"decl_id":null,"docs":" Builds a definition of a variant type i.e an `enum`\n","sig":null,"attributes":[{"value":"/ Builds a definition of a variant type i.e an `enum`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28041,"byte_end":28096,"line_start":464,"line_end":464,"column_start":1,"column_end":56}},{"value":"must_use","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28116,"byte_end":28127,"line_start":466,"line_end":466,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28250,"byte_end":28253,"line_start":473,"line_end":473,"column_start":12,"column_end":15},"name":"new","qualname":"<Variants>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`VariantsBuilder`].\n","sig":null,"attributes":[{"value":"/ Create a new [`VariantsBuilder`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28201,"byte_end":28238,"line_start":472,"line_end":472,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28369,"byte_end":28376,"line_start":480,"line_end":480,"column_start":12,"column_end":19},"name":"variant","qualname":"<Variants>::variant","value":"pub fn variant<F>(Self, &'static str, F) -> Self where F: Fn(VariantBuilder)\n-> VariantBuilder<variant_state::IndexAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Add a variant\n","sig":null,"attributes":[{"value":"/ Add a variant","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28340,"byte_end":28357,"line_start":479,"line_end":479,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28707,"byte_end":28719,"line_start":490,"line_end":490,"column_start":12,"column_end":24},"name":"variant_unit","qualname":"<Variants>::variant_unit","value":"pub fn variant_unit(Self, &'static str, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add a unit variant (without fields).\n","sig":null,"attributes":[{"value":"/ Add a unit variant (without fields).","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28655,"byte_end":28695,"line_start":489,"line_end":489,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28994,"byte_end":29002,"line_start":497,"line_end":497,"column_start":12,"column_end":20},"name":"finalize","qualname":"<Variants>::finalize","value":"pub fn finalize(Self) -> TypeDefVariant","parent":null,"children":[],"decl_id":null,"docs":" Construct a new [`TypeDefVariant`] from the initialized builder variants.\n","sig":null,"attributes":[{"value":"/ Construct a new [`TypeDefVariant`] from the initialized builder variants.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28905,"byte_end":28982,"line_start":496,"line_end":496,"column_start":5,"column_end":82}}]},{"kind":"Mod","id":{"krate":0,"index":146},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29155,"byte_end":29168,"line_start":503,"line_end":503,"column_start":9,"column_end":22},"name":"variant_state","qualname":"::build::variant_state","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148}],"decl_id":null,"docs":" State types for the `VariantBuilder` which requires an index.\n","sig":null,"attributes":[{"value":"/ State types for the `VariantBuilder` which requires an index.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29081,"byte_end":29146,"line_start":502,"line_end":502,"column_start":1,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":147},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29256,"byte_end":29272,"line_start":505,"line_end":505,"column_start":14,"column_end":30},"name":"IndexNotAssigned","qualname":"::build::variant_state::IndexNotAssigned","value":"pub enum IndexNotAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" State where the builder has not assigned an index to a variant.\n","sig":null,"attributes":[{"value":"/ State where the builder has not assigned an index to a variant.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29175,"byte_end":29242,"line_start":504,"line_end":504,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":148},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29357,"byte_end":29370,"line_start":507,"line_end":507,"column_start":14,"column_end":27},"name":"IndexAssigned","qualname":"::build::variant_state::IndexAssigned","value":"pub enum IndexAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" State where the builder has assigned an index to a variant.\n","sig":null,"attributes":[{"value":"/ State where the builder has assigned an index to a variant.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29280,"byte_end":29343,"line_start":506,"line_end":506,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":149},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29425,"byte_end":29439,"line_start":512,"line_end":512,"column_start":12,"column_end":26},"name":"VariantBuilder","qualname":"::build::VariantBuilder","value":"VariantBuilder {  }","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"decl_id":null,"docs":" Build a [`Variant`].\n","sig":null,"attributes":[{"value":"/ Build a [`Variant`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29377,"byte_end":29401,"line_start":510,"line_end":510,"column_start":1,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29402,"byte_end":29413,"line_start":511,"line_end":511,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29758,"byte_end":29761,"line_start":523,"line_end":523,"column_start":12,"column_end":15},"name":"new","qualname":"<VariantBuilder<variant_state::IndexNotAssigned>>::new","value":"pub fn new(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`VariantBuilder`].\n","sig":null,"attributes":[{"value":"/ Create a new [`VariantBuilder`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29710,"byte_end":29746,"line_start":522,"line_end":522,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30051,"byte_end":30056,"line_start":535,"line_end":535,"column_start":12,"column_end":17},"name":"index","qualname":"<VariantBuilder<variant_state::IndexNotAssigned>>::index","value":"pub fn index(Self, u8) -> VariantBuilder<variant_state::IndexAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Set the variant's codec index.\n","sig":null,"attributes":[{"value":"/ Set the variant's codec index.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30005,"byte_end":30039,"line_start":534,"line_end":534,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30455,"byte_end":30467,"line_start":549,"line_end":549,"column_start":12,"column_end":24},"name":"discriminant","qualname":"<VariantBuilder<S>>::discriminant","value":"pub fn discriminant(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the variant's discriminant.\n","sig":null,"attributes":[{"value":"/ Set the variant's discriminant.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30408,"byte_end":30443,"line_start":548,"line_end":548,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30627,"byte_end":30633,"line_start":555,"line_end":555,"column_start":12,"column_end":18},"name":"fields","qualname":"<VariantBuilder<S>>::fields","value":"pub fn fields<F>(Self, FieldsBuilder<F>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize the variant's fields.\n","sig":null,"attributes":[{"value":"/ Initialize the variant's fields.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30579,"byte_end":30615,"line_start":554,"line_end":554,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31088,"byte_end":31092,"line_start":570,"line_end":570,"column_start":12,"column_end":16},"name":"docs","qualname":"<VariantBuilder<S>>::docs","value":"pub fn docs(Self, &[&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Doc capture is not enabled via the \"docs\" feature so this is a no-op.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"docs\"))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30955,"byte_end":30984,"line_start":567,"line_end":567,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30989,"byte_end":30998,"line_start":568,"line_end":568,"column_start":5,"column_end":14}},{"value":"/ Doc capture is not enabled via the \"docs\" feature so this is a no-op.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31003,"byte_end":31076,"line_start":569,"line_end":569,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31279,"byte_end":31290,"line_start":576,"line_end":576,"column_start":12,"column_end":23},"name":"docs_always","qualname":"<VariantBuilder<S>>::docs_always","value":"pub fn docs_always(Self, &[&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize the variant's documentation, always captured even if the \"docs\" feature is not\n enabled.\n","sig":null,"attributes":[{"value":"/ Initialize the variant's documentation, always captured even if the \"docs\" feature is not","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31157,"byte_end":31250,"line_start":574,"line_end":574,"column_start":5,"column_end":98}},{"value":"/ enabled.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31255,"byte_end":31267,"line_start":575,"line_end":575,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31519,"byte_end":31527,"line_start":584,"line_end":584,"column_start":12,"column_end":20},"name":"finalize","qualname":"<VariantBuilder<variant_state::IndexAssigned>>::finalize","value":"pub fn finalize(Self) -> Variant<MetaForm>","parent":null,"children":[],"decl_id":null,"docs":" Complete building and create final [`Variant`] instance.\n","sig":null,"attributes":[{"value":"/ Complete building and create final [`Variant`] instance.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31447,"byte_end":31507,"line_start":583,"line_end":583,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":169},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"form","qualname":"::form","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":3030},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3034},{"krate":0,"index":3035},{"krate":0,"index":3037},{"krate":0,"index":3039},{"krate":0,"index":3041},{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":989},{"krate":0,"index":190},{"krate":0,"index":3014},{"krate":0,"index":3015},{"krate":0,"index":3016},{"krate":0,"index":3018},{"krate":0,"index":3019},{"krate":0,"index":3021},{"krate":0,"index":3023},{"krate":0,"index":3025},{"krate":0,"index":3027},{"krate":0,"index":3028},{"krate":0,"index":995},{"krate":0,"index":1001}],"decl_id":null,"docs":" Provides form definitions.","sig":null,"attributes":[{"value":"/ Provides form definitions.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32355,"byte_end":32385,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32386,"byte_end":32389,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The forms provided here are used to generically communicate the mode a type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32390,"byte_end":32469,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ identifier, type definition or structure is using.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32470,"byte_end":32524,"line_start":18,"line_end":18,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32525,"byte_end":32528,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The default form is the `MetaForm`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32529,"byte_end":32568,"line_start":20,"line_end":20,"column_start":1,"column_end":40}},{"value":"/ It uses `MetaType` for communicating type identifiers and thus acts as","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32569,"byte_end":32643,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ a bridge from runtime to compile time type information.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32644,"byte_end":32703,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32704,"byte_end":32707,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The `PortableForm` is a space-efficient representation","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32708,"byte_end":32766,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ that no longer has any connections to the interning registry and thus","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32767,"byte_end":32840,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ can no longer be used to retrieve information from the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32841,"byte_end":32899,"line_start":26,"line_end":26,"column_start":1,"column_end":59}},{"value":"/ original registry. Its sole purpose is for space-efficient serialization.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32900,"byte_end":32977,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32978,"byte_end":32981,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Other forms, such as a portable form that is still bound to the registry","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":32982,"byte_end":33058,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ (also via lifetime tracking) are possible but current not needed.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33059,"byte_end":33128,"line_start":30,"line_end":30,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33573,"byte_end":33577,"line_start":50,"line_end":50,"column_start":11,"column_end":15},"name":"Form","qualname":"::form::Form","value":"Form","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"decl_id":null,"docs":" Trait to control the internal structures of type definitions.","sig":null,"attributes":[{"value":"/ Trait to control the internal structures of type definitions.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33311,"byte_end":33376,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33377,"byte_end":33380,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This allows for type-level separation between free forms that can be","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33381,"byte_end":33453,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/ instantiated out of the flux and portable forms that require some sort of","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33454,"byte_end":33531,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ interning data structures.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33532,"byte_end":33562,"line_start":49,"line_end":49,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":188},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33629,"byte_end":33633,"line_start":52,"line_end":52,"column_start":10,"column_end":14},"name":"Type","qualname":"::form::Form::Type","value":"type Type: PartialEq + Eq + PartialOrd + Ord + Clone + Debug;","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" The type representing the type.\n","sig":null,"attributes":[{"value":"/ The type representing the type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33584,"byte_end":33619,"line_start":51,"line_end":51,"column_start":5,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33720,"byte_end":33726,"line_start":54,"line_end":54,"column_start":10,"column_end":16},"name":"String","qualname":"::form::Form::String","value":"type String: AsRef<str> + PartialEq + Eq + PartialOrd + Ord + Clone + Debug;","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" The string type.\n","sig":null,"attributes":[{"value":"/ The string type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33690,"byte_end":33710,"line_start":53,"line_end":53,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":3030},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34053,"byte_end":34061,"line_start":63,"line_end":63,"column_start":10,"column_end":18},"name":"MetaForm","qualname":"::form::MetaForm","value":"pub enum MetaForm { }","parent":null,"children":[],"decl_id":null,"docs":" A meta meta-type.","sig":null,"attributes":[{"value":"/ A meta meta-type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33795,"byte_end":33816,"line_start":57,"line_end":57,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33817,"byte_end":33820,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Allows to be converted into other forms such as portable form","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33821,"byte_end":33886,"line_start":59,"line_end":59,"column_start":1,"column_end":66}},{"value":"/ through the registry and `IntoPortable`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":33887,"byte_end":33931,"line_start":60,"line_end":60,"column_start":1,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":3014},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34551,"byte_end":34563,"line_start":79,"line_end":79,"column_start":10,"column_end":22},"name":"PortableForm","qualname":"::form::PortableForm","value":"pub enum PortableForm { }","parent":null,"children":[],"decl_id":null,"docs":" Portable form that has its lifetime untracked in association to its interner.","sig":null,"attributes":[{"value":"/ Portable form that has its lifetime untracked in association to its interner.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34152,"byte_end":34233,"line_start":70,"line_end":70,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34234,"byte_end":34237,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34238,"byte_end":34248,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34249,"byte_end":34252,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ This resolves some lifetime issues with self-referential structs (such as","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34253,"byte_end":34330,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/ the registry itself) but can no longer be used to resolve to the original","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34331,"byte_end":34408,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ underlying data.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34409,"byte_end":34429,"line_start":76,"line_end":76,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":386},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interner","qualname":"::interner","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":1406},{"krate":0,"index":1390},{"krate":0,"index":1397},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1372},{"krate":0,"index":1375},{"krate":0,"index":1378},{"krate":0,"index":1385},{"krate":0,"index":408},{"krate":0,"index":1452},{"krate":0,"index":1444},{"krate":0,"index":1410},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1421},{"krate":0,"index":1424},{"krate":0,"index":1429},{"krate":0,"index":1432},{"krate":0,"index":1436},{"krate":0,"index":1440},{"krate":0,"index":411},{"krate":0,"index":1478},{"krate":0,"index":1471},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":420}],"decl_id":null,"docs":" Interning data structure and associated symbol definitions.","sig":null,"attributes":[{"value":"/ Interning data structure and associated symbol definitions.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":45922,"byte_end":45985,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":45986,"byte_end":45989,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The interner is used by the registry in order to deduplicate strings and type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":45990,"byte_end":46071,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/ definitions. Strings are uniquely identified by their contents while types","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46072,"byte_end":46150,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ are uniquely identified by their respective type identifiers.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46151,"byte_end":46216,"line_start":19,"line_end":19,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46217,"byte_end":46220,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The interners provide a strict ordered sequence of cached (interned)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46221,"byte_end":46293,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ elements and is later used for space-efficient serialization within the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46294,"byte_end":46369,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ registry.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46370,"byte_end":46383,"line_start":23,"line_end":23,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1406},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46965,"byte_end":46980,"line_start":49,"line_end":49,"column_start":12,"column_end":27},"name":"UntrackedSymbol","qualname":"::interner::UntrackedSymbol","value":"UntrackedSymbol {  }","parent":null,"children":[{"krate":0,"index":1408},{"krate":0,"index":1409}],"decl_id":null,"docs":" A symbol that is not lifetime tracked.","sig":null,"attributes":[{"value":"/ A symbol that is not lifetime tracked.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46595,"byte_end":46637,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46638,"byte_end":46641,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This can be used by self-referential types but","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46642,"byte_end":46692,"line_start":42,"line_end":42,"column_start":1,"column_end":51}},{"value":"/ can no longer be used to resolve instances.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46693,"byte_end":46740,"line_start":43,"line_end":43,"column_start":1,"column_end":48}},{"value":"serde(transparent)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":46933,"byte_end":46951,"line_start":48,"line_end":48,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47266,"byte_end":47268,"line_start":59,"line_end":59,"column_start":12,"column_end":14},"name":"id","qualname":"<UntrackedSymbol<T>>::id","value":"pub fn id(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the index to the symbol in the interner table.\n","sig":null,"attributes":[{"value":"/ Returns the index to the symbol in the interner table.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47196,"byte_end":47254,"line_start":58,"line_end":58,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1452},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47574,"byte_end":47580,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"Symbol","qualname":"::interner::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":1455},{"krate":0,"index":1456}],"decl_id":null,"docs":" A symbol from an interner.","sig":null,"attributes":[{"value":"/ A symbol from an interner.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47310,"byte_end":47340,"line_start":64,"line_end":64,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47341,"byte_end":47344,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Can be used to resolve to the associated instance.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47345,"byte_end":47399,"line_start":66,"line_end":66,"column_start":1,"column_end":55}},{"value":"serde(transparent)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47542,"byte_end":47560,"line_start":69,"line_end":69,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48374,"byte_end":48388,"line_start":92,"line_end":92,"column_start":12,"column_end":26},"name":"into_untracked","qualname":"<Symbol>::into_untracked","value":"pub fn into_untracked(Self) -> UntrackedSymbol<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the lifetime tracking for this symbol.","sig":null,"attributes":[{"value":"/ Removes the lifetime tracking for this symbol.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47722,"byte_end":47772,"line_start":77,"line_end":77,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47777,"byte_end":47780,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47785,"byte_end":47795,"line_start":79,"line_end":79,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47800,"byte_end":47803,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ - This can be useful in situations where a data structure owns all","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47808,"byte_end":47878,"line_start":81,"line_end":81,"column_start":5,"column_end":75}},{"value":"/   symbols and interners and can verify accesses by itself.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47883,"byte_end":47945,"line_start":82,"line_end":82,"column_start":5,"column_end":67}},{"value":"/ - For further safety reasons an untracked symbol can no longer be used","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47950,"byte_end":48024,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/   to resolve from an interner. It is still useful for serialization","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48029,"byte_end":48100,"line_start":84,"line_end":84,"column_start":5,"column_end":76}},{"value":"/   purposes.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48105,"byte_end":48120,"line_start":85,"line_end":85,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48125,"byte_end":48128,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48133,"byte_end":48145,"line_start":87,"line_end":87,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48150,"byte_end":48153,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Although removing lifetime constraints this operation can be","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48158,"byte_end":48222,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/ considered to be safe since untracked symbols can no longer be","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48227,"byte_end":48293,"line_start":90,"line_end":90,"column_start":5,"column_end":71}},{"value":"/ used to resolve their associated instance from the interner.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48298,"byte_end":48362,"line_start":91,"line_end":91,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1478},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48989,"byte_end":48997,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"Interner","qualname":"::interner::Interner","value":"Interner {  }","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1480}],"decl_id":null,"docs":" Interning data structure generic over the element type.","sig":null,"attributes":[{"value":"/ Interning data structure generic over the element type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48522,"byte_end":48581,"line_start":100,"line_end":100,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48582,"byte_end":48585,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ For the sake of simplicity and correctness we are using a rather naive","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48586,"byte_end":48660,"line_start":102,"line_end":102,"column_start":1,"column_end":75}},{"value":"/ implementation.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48661,"byte_end":48680,"line_start":103,"line_end":103,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48681,"byte_end":48684,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48685,"byte_end":48696,"line_start":105,"line_end":105,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48697,"byte_end":48700,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ This is used in order to quite efficiently cache strings and type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48701,"byte_end":48770,"line_start":107,"line_end":107,"column_start":1,"column_end":70}},{"value":"/ definitions uniquely identified by their associated type identifiers.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48771,"byte_end":48844,"line_start":108,"line_end":108,"column_start":1,"column_end":74}},{"value":"serde(transparent)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":48957,"byte_end":48975,"line_start":111,"line_end":111,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49676,"byte_end":49679,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"new","qualname":"<Interner<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty interner.\n","sig":null,"attributes":[{"value":"/ Creates a new empty interner.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49631,"byte_end":49664,"line_start":132,"line_end":132,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":50051,"byte_end":50064,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"intern_or_get","qualname":"<Interner<T>>::intern_or_get","value":"pub fn intern_or_get(&mut Self, T) -> (bool, Symbol<, T>)","parent":null,"children":[],"decl_id":null,"docs":" Interns the given element or returns its associated symbol if it has\n already been interned.\n","sig":null,"attributes":[{"value":"/ Interns the given element or returns its associated symbol if it has","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49936,"byte_end":50008,"line_start":151,"line_end":151,"column_start":5,"column_end":77}},{"value":"/ already been interned.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":50013,"byte_end":50039,"line_start":152,"line_end":152,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":50717,"byte_end":50720,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"get","qualname":"<Interner<T>>::get","value":"pub fn get(&Self, &T) -> Option<Symbol<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the symbol of the given element or `None` if it hasn't been\n interned already.\n","sig":null,"attributes":[{"value":"/ Returns the symbol of the given element or `None` if it hasn't been","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":50608,"byte_end":50679,"line_start":172,"line_end":172,"column_start":5,"column_end":76}},{"value":"/ interned already.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":50684,"byte_end":50705,"line_start":173,"line_end":173,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":51055,"byte_end":51062,"line_start":185,"line_end":185,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Interner<T>>::resolve","value":"pub fn resolve(&Self, Symbol<, T>) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Resolves the original element given its associated symbol or\n returns `None` if it has not been interned yet.\n","sig":null,"attributes":[{"value":"/ Resolves the original element given its associated symbol or","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":50923,"byte_end":50987,"line_start":183,"line_end":183,"column_start":5,"column_end":69}},{"value":"/ returns `None` if it has not been interned yet.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":50992,"byte_end":51043,"line_start":184,"line_end":184,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1482},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53556,"byte_end":53564,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"MetaType","qualname":"::meta_type::MetaType","value":"MetaType {  }","parent":null,"children":[{"krate":0,"index":1483},{"krate":0,"index":1484}],"decl_id":null,"docs":" A metatype abstraction.","sig":null,"attributes":[{"value":"/ A metatype abstraction.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53259,"byte_end":53286,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53287,"byte_end":53290,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Allows to store compile-time type information at runtime.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53291,"byte_end":53352,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/ This again allows to derive type ID and type definition from it.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53353,"byte_end":53421,"line_start":38,"line_end":38,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53422,"byte_end":53425,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ This needs a conversion to another representation of types","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53426,"byte_end":53488,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"/ in order to be serializable.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53489,"byte_end":53521,"line_start":41,"line_end":41,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54632,"byte_end":54635,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<MetaType>::new","value":"pub fn new<T>() -> Self where T: TypeInfo + ?Sized + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a new meta type from the given compile-time known type.\n","sig":null,"attributes":[{"value":"/ Creates a new meta type from the given compile-time known type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54553,"byte_end":54620,"line_start":88,"line_end":88,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54895,"byte_end":54904,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"type_info","qualname":"<MetaType>::type_info","value":"pub fn type_info(&Self) -> Type<MetaForm>","parent":null,"children":[],"decl_id":null,"docs":" Returns the meta type information.\n","sig":null,"attributes":[{"value":"/ Returns the meta type information.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54845,"byte_end":54883,"line_start":99,"line_end":99,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":55041,"byte_end":55048,"line_start":105,"line_end":105,"column_start":12,"column_end":19},"name":"type_id","qualname":"<MetaType>::type_id","value":"pub fn type_id(&Self) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Returns the type identifier provided by `core::any`.\n","sig":null,"attributes":[{"value":"/ Returns the type identifier provided by `core::any`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54973,"byte_end":55029,"line_start":104,"line_end":104,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":517},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":56847,"byte_end":56859,"line_start":48,"line_end":48,"column_start":11,"column_end":23},"name":"IntoPortable","qualname":"::registry::IntoPortable","value":"IntoPortable","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519}],"decl_id":null,"docs":" Convert the type definition into the portable form using a registry.\n","sig":null,"attributes":[{"value":"/ Convert the type definition into the portable form using a registry.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":56764,"byte_end":56836,"line_start":47,"line_end":47,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":518},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":56911,"byte_end":56917,"line_start":50,"line_end":50,"column_start":10,"column_end":16},"name":"Output","qualname":"::registry::IntoPortable::Output","value":"type Output;","parent":{"krate":0,"index":517},"children":[],"decl_id":null,"docs":" The portable version of `Self`.\n","sig":null,"attributes":[{"value":"/ The portable version of `Self`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":56866,"byte_end":56901,"line_start":49,"line_end":49,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57006,"byte_end":57019,"line_start":53,"line_end":53,"column_start":8,"column_end":21},"name":"into_portable","qualname":"::registry::IntoPortable::into_portable","value":"pub fn into_portable(Self, &mut Registry) -> Self::Output","parent":{"krate":0,"index":517},"children":[],"decl_id":null,"docs":" Convert `self` to the portable form by using the registry for caching.\n","sig":null,"attributes":[{"value":"/ Convert `self` to the portable form by using the registry for caching.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":56924,"byte_end":56998,"line_start":52,"line_end":52,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3002},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57841,"byte_end":57849,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"Registry","qualname":"::registry::Registry","value":"Registry {  }","parent":null,"children":[{"krate":0,"index":3003},{"krate":0,"index":3004}],"decl_id":null,"docs":" The registry for space-efficient storage of type identifiers and\n definitions.","sig":null,"attributes":[{"value":"/ The registry for space-efficient storage of type identifiers and","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57259,"byte_end":57327,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"/ definitions.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57328,"byte_end":57344,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57345,"byte_end":57348,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The registry consists of a cache for type identifiers and definitions.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57349,"byte_end":57423,"line_start":67,"line_end":67,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57424,"byte_end":57427,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ When adding a type to  the registry, all of its sub-types are registered","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57428,"byte_end":57504,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/ recursively as well. A type is considered a sub-type of another type if it","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57505,"byte_end":57583,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/ is used by its identifier or structure.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57584,"byte_end":57627,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57628,"byte_end":57631,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57632,"byte_end":57642,"line_start":73,"line_end":73,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57643,"byte_end":57646,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ A type can be a sub-type of itself. In this case the registry has a builtin","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57647,"byte_end":57726,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ mechanism to stop recursion and avoid going into an infinite loop.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":57727,"byte_end":57797,"line_start":76,"line_end":76,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":58393,"byte_end":58396,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Registry>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty registry.\n","sig":null,"attributes":[{"value":"/ Creates a new empty registry.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":58348,"byte_end":58381,"line_start":97,"line_end":97,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59524,"byte_end":59537,"line_start":129,"line_end":129,"column_start":12,"column_end":25},"name":"register_type","qualname":"<Registry>::register_type","value":"pub fn register_type(&mut Self, &MetaType) -> UntrackedSymbol<TypeId>","parent":null,"children":[],"decl_id":null,"docs":" Registers the given type into the registry and returns\n its associated type ID symbol.","sig":null,"attributes":[{"value":"/ Registers the given type into the registry and returns","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59110,"byte_end":59168,"line_start":120,"line_end":120,"column_start":5,"column_end":63}},{"value":"/ its associated type ID symbol.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59173,"byte_end":59207,"line_start":121,"line_end":121,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59212,"byte_end":59215,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59220,"byte_end":59230,"line_start":123,"line_end":123,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59235,"byte_end":59238,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Due to safety requirements the returns type ID symbol cannot","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59243,"byte_end":59307,"line_start":125,"line_end":125,"column_start":5,"column_end":69}},{"value":"/ be used later to resolve back to the associated type definition.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59312,"byte_end":59380,"line_start":126,"line_end":126,"column_start":5,"column_end":73}},{"value":"/ However, since this facility is going to be used for serialization","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59385,"byte_end":59455,"line_start":127,"line_end":127,"column_start":5,"column_end":75}},{"value":"/ purposes this functionality isn't needed anyway.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59460,"byte_end":59512,"line_start":128,"line_end":128,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59915,"byte_end":59929,"line_start":139,"line_end":139,"column_start":12,"column_end":26},"name":"register_types","qualname":"<Registry>::register_types","value":"pub fn register_types<I>(&mut Self, I) -> Vec<UntrackedSymbol<TypeId>> where\nI: IntoIterator<Item = MetaType>","parent":null,"children":[],"decl_id":null,"docs":" Calls `register_type` for each `MetaType` in the given `iter`.\n","sig":null,"attributes":[{"value":"/ Calls `register_type` for each `MetaType` in the given `iter`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":59837,"byte_end":59903,"line_start":138,"line_end":138,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":60256,"byte_end":60273,"line_start":150,"line_end":150,"column_start":12,"column_end":29},"name":"map_into_portable","qualname":"<Registry>::map_into_portable","value":"pub fn map_into_portable<I, T>(&mut Self, I) -> Vec<T::Output> where\nI: IntoIterator<Item = T>, T: IntoPortable","parent":null,"children":[],"decl_id":null,"docs":" Converts an iterator into a Vec of the equivalent portable\n representations.\n","sig":null,"attributes":[{"value":"/ Converts an iterator into a Vec of the equivalent portable","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":60157,"byte_end":60219,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/ representations.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":60224,"byte_end":60244,"line_start":149,"line_end":149,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2980},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":60865,"byte_end":60881,"line_start":166,"line_end":166,"column_start":12,"column_end":28},"name":"PortableRegistry","qualname":"::registry::PortableRegistry","value":"PortableRegistry {  }","parent":null,"children":[{"krate":0,"index":2981}],"decl_id":null,"docs":" A read-only registry containing types in their portable form for serialization.\n","sig":null,"attributes":[{"value":"/ A read-only registry containing types in their portable form for serialization.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":60505,"byte_end":60588,"line_start":161,"line_end":161,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":61478,"byte_end":61485,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"resolve","qualname":"<PortableRegistry>::resolve","value":"pub fn resolve(&Self, u32) -> Option<&Type<PortableForm>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the type definition for the given identifier, `None` if no type found for that ID.\n","sig":null,"attributes":[{"value":"/ Returns the type definition for the given identifier, `None` if no type found for that ID.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":61372,"byte_end":61466,"line_start":188,"line_end":188,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":61668,"byte_end":61673,"line_start":194,"line_end":194,"column_start":12,"column_end":17},"name":"types","qualname":"<PortableRegistry>::types","value":"pub fn types(&Self) -> &[PortableType]","parent":null,"children":[],"decl_id":null,"docs":" Returns all types with their associated identifiers.\n","sig":null,"attributes":[{"value":"/ Returns all types with their associated identifiers.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":61600,"byte_end":61656,"line_start":193,"line_end":193,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2961},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":62007,"byte_end":62019,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"PortableType","qualname":"::registry::PortableType","value":"PortableType {  }","parent":null,"children":[{"krate":0,"index":2978},{"krate":0,"index":2979}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":62229,"byte_end":62231,"line_start":212,"line_end":212,"column_start":12,"column_end":14},"name":"id","qualname":"<PortableType>::id","value":"pub fn id(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the [`PortableType`].\n","sig":null,"attributes":[{"value":"/ Returns the index of the [`PortableType`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":62171,"byte_end":62217,"line_start":211,"line_end":211,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":62332,"byte_end":62334,"line_start":217,"line_end":217,"column_start":12,"column_end":14},"name":"ty","qualname":"<PortableType>::ty","value":"pub fn ty(&Self) -> &Type<PortableForm>","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of the [`PortableType`].\n","sig":null,"attributes":[{"value":"/ Returns the type of the [`PortableType`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":62275,"byte_end":62320,"line_start":216,"line_end":216,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1648},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83606,"byte_end":83622,"line_start":73,"line_end":73,"column_start":12,"column_end":28},"name":"TypeDefComposite","qualname":"::ty::composite::TypeDefComposite","value":"TypeDefComposite {  }","parent":null,"children":[{"krate":0,"index":1687}],"decl_id":null,"docs":" A composite type, consisting of either named (struct) or unnamed (tuple\n struct) fields","sig":null,"attributes":[{"value":"/ A composite type, consisting of either named (struct) or unnamed (tuple","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82657,"byte_end":82732,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ struct) fields","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82733,"byte_end":82751,"line_start":37,"line_end":37,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82752,"byte_end":82755,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82756,"byte_end":82770,"line_start":39,"line_end":39,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82771,"byte_end":82774,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ## A Rust struct with named fields.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82775,"byte_end":82814,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82815,"byte_end":82818,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82819,"byte_end":82826,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ struct Person {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82827,"byte_end":82846,"line_start":44,"line_end":44,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82847,"byte_end":82868,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/     age_in_years: u8,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82869,"byte_end":82894,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"/     friends: Vec<Person>,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82895,"byte_end":82924,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82925,"byte_end":82930,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82931,"byte_end":82938,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82939,"byte_end":82942,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ## A tuple struct with unnamed fields.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82943,"byte_end":82985,"line_start":51,"line_end":51,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82986,"byte_end":82989,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82990,"byte_end":82997,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ struct Color(u8, u8, u8);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":82998,"byte_end":83027,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83028,"byte_end":83035,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83036,"byte_end":83039,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ## A so-called unit struct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83040,"byte_end":83070,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83071,"byte_end":83074,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83075,"byte_end":83082,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ struct JustAMarker;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83083,"byte_end":83106,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83107,"byte_end":83114,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83217,"byte_end":83380,"line_start":65,"line_end":68,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83414,"byte_end":83445,"line_start":70,"line_end":70,"column_start":31,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":84474,"byte_end":84480,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"fields","qualname":"<TypeDefComposite<T>>::fields","value":"pub fn fields(&Self) -> &[Field<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the fields of the composite type.\n","sig":null,"attributes":[{"value":"/ Returns the fields of the composite type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":84417,"byte_end":84462,"line_start":108,"line_end":108,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1750},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":87329,"byte_end":87334,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"Field","qualname":"::ty::fields::Field","value":"Field {  }","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785}],"decl_id":null,"docs":" A field of a struct-like data type.","sig":null,"attributes":[{"value":"/ A field of a struct-like data type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85450,"byte_end":85489,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85490,"byte_end":85493,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Name is optional so it can represent both named and unnamed fields.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85494,"byte_end":85565,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85566,"byte_end":85569,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This can be a named field of a struct type or an enum struct variant, or an","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85570,"byte_end":85649,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ unnamed field of a tuple struct.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85650,"byte_end":85686,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85687,"byte_end":85690,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Type name","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85691,"byte_end":85706,"line_start":42,"line_end":42,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85707,"byte_end":85710,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The `type_name` field contains a string which is the name of the type of the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85711,"byte_end":85791,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ field as it appears in the source code. The exact contents and format of the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85792,"byte_end":85872,"line_start":45,"line_end":45,"column_start":1,"column_end":81}},{"value":"/ type name are not specified, but in practice will be the name of any valid","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85873,"byte_end":85951,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ type for a field e.g.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85952,"byte_end":85977,"line_start":47,"line_end":47,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85978,"byte_end":85981,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/   - Concrete types e.g `\"u32\"`, `\"bool\"`, `\"Foo\"` etc.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":85982,"byte_end":86040,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/   - Type parameters e.g `\"T\"`, `\"U\"`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86041,"byte_end":86081,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   - Generic types e.g `\"Vec<u32>\"`, `\"Vec<T>\"`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86082,"byte_end":86132,"line_start":51,"line_end":51,"column_start":1,"column_end":51}},{"value":"/   - Associated types e.g. `\"T::MyType\"`, `\"<T as MyTrait>::MyType\"`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86133,"byte_end":86204,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/   - Type aliases e.g. `\"MyTypeAlias\"`, `\"MyTypeAlias<T>\"`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86205,"byte_end":86266,"line_start":53,"line_end":53,"column_start":1,"column_end":62}},{"value":"/   - Other built in Rust types e.g. arrays, references etc.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86267,"byte_end":86329,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86330,"byte_end":86333,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Note that the type name doesn't correspond to the underlying type of the","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86334,"byte_end":86410,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ field, unless using a concrete type directly. Any given type may be referred","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86411,"byte_end":86491,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ to by multiple field type names, when using generic type parameters and type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86492,"byte_end":86572,"line_start":58,"line_end":58,"column_start":1,"column_end":81}},{"value":"/ aliases.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86573,"byte_end":86585,"line_start":59,"line_end":59,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86586,"byte_end":86589,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This is intended for informational and diagnostic purposes only. Although it","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86590,"byte_end":86670,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ is possible to infer certain properties e.g. whether a type name is a type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86671,"byte_end":86749,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ alias, there are no guarantees provided, and the type name representation","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86750,"byte_end":86827,"line_start":63,"line_end":63,"column_start":1,"column_end":78}},{"value":"/ may change.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86828,"byte_end":86843,"line_start":64,"line_end":64,"column_start":1,"column_end":16}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":86946,"byte_end":87109,"line_start":68,"line_end":71,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"camelCase\")","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":87143,"byte_end":87174,"line_start":73,"line_end":73,"column_start":31,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88567,"byte_end":88574,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"builder","qualname":"<Field>::builder","value":"pub fn builder() -> FieldBuilder","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`FieldBuilder`] for constructing a field.\n","sig":null,"attributes":[{"value":"/ Returns a new [`FieldBuilder`] for constructing a field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88495,"byte_end":88555,"line_start":114,"line_end":114,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88758,"byte_end":88761,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<Field>::new","value":"pub fn new(Option<&'static str>, MetaType, Option<&'static str>,\n&[&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new field.","sig":null,"attributes":[{"value":"/ Creates a new field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88634,"byte_end":88658,"line_start":119,"line_end":119,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88663,"byte_end":88666,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Use this constructor if you want to instantiate from a given meta type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88671,"byte_end":88746,"line_start":121,"line_end":121,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89146,"byte_end":89150,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"name","qualname":"<Field<T>>::name","value":"pub fn name(&Self) -> Option<&T::String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the field. None for unnamed fields.\n","sig":null,"attributes":[{"value":"/ Returns the name of the field. None for unnamed fields.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89075,"byte_end":89134,"line_start":141,"line_end":141,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89266,"byte_end":89268,"line_start":147,"line_end":147,"column_start":12,"column_end":14},"name":"ty","qualname":"<Field<T>>::ty","value":"pub fn ty(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of the field.\n","sig":null,"attributes":[{"value":"/ Returns the type of the field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89220,"byte_end":89254,"line_start":146,"line_end":146,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89654,"byte_end":89663,"line_start":156,"line_end":156,"column_start":12,"column_end":21},"name":"type_name","qualname":"<Field<T>>::type_name","value":"pub fn type_name(&Self) -> Option<&T::String>","parent":null,"children":[],"decl_id":null,"docs":" Returns a string which is the name of the type of the field as it\n appears in the source code. The exact contents and format of the type\n name are not specified, but in practice will be the name of any valid\n type for a field. This is intended for informational and diagnostic\n purposes only.\n","sig":null,"attributes":[{"value":"/ Returns a string which is the name of the type of the field as it","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89318,"byte_end":89387,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ appears in the source code. The exact contents and format of the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89392,"byte_end":89465,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ name are not specified, but in practice will be the name of any valid","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89470,"byte_end":89543,"line_start":153,"line_end":153,"column_start":5,"column_end":78}},{"value":"/ type for a field. This is intended for informational and diagnostic","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89548,"byte_end":89619,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/ purposes only.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89624,"byte_end":89642,"line_start":155,"line_end":155,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89793,"byte_end":89797,"line_start":161,"line_end":161,"column_start":12,"column_end":16},"name":"docs","qualname":"<Field<T>>::docs","value":"pub fn docs(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Returns the documentation of the field.\n","sig":null,"attributes":[{"value":"/ Returns the documentation of the field.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89738,"byte_end":89781,"line_start":160,"line_end":160,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1807},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91634,"byte_end":91638,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"Path","qualname":"::ty::path::Path","value":"Path {  }","parent":null,"children":[{"krate":0,"index":1809}],"decl_id":null,"docs":" Represents the path of a type definition.","sig":null,"attributes":[{"value":"/ Represents the path of a type definition.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":90865,"byte_end":90910,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":90911,"byte_end":90914,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This consists of several segments that each have to be a valid Rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":90915,"byte_end":90986,"line_start":45,"line_end":45,"column_start":1,"column_end":72}},{"value":"/ identifier. The first segment represents the crate name in which the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":90987,"byte_end":91064,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ has been defined. The last","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91065,"byte_end":91095,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91096,"byte_end":91099,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Rust prelude type may have an empty namespace definition.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91100,"byte_end":91161,"line_start":49,"line_end":49,"column_start":1,"column_end":62}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91264,"byte_end":91427,"line_start":53,"line_end":56,"column_start":5,"column_end":7}},{"value":"serde(transparent)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91461,"byte_end":91479,"line_start":58,"line_end":58,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92441,"byte_end":92444,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<Path>::new","value":"pub fn new(&'static str, &'static str) -> Path","parent":null,"children":[],"decl_id":null,"docs":" Create a new Path","sig":null,"attributes":[{"value":"/ Create a new Path","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92294,"byte_end":92315,"line_start":94,"line_end":94,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92320,"byte_end":92323,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92328,"byte_end":92340,"line_start":96,"line_end":96,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92345,"byte_end":92348,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ - If the type identifier or module path contain invalid Rust identifiers","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92353,"byte_end":92429,"line_start":98,"line_end":98,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93446,"byte_end":93459,"line_start":130,"line_end":130,"column_start":12,"column_end":25},"name":"from_segments","qualname":"<Path>::from_segments","value":"pub fn from_segments<I>(I) -> Result<Path, PathError> where\nI: IntoIterator<Item = &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Create a Path from the given segments","sig":null,"attributes":[{"value":"/ Create a Path from the given segments","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93260,"byte_end":93301,"line_start":124,"line_end":124,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93306,"byte_end":93309,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93314,"byte_end":93326,"line_start":126,"line_end":126,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93331,"byte_end":93334,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ - If no segments are supplied","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93339,"byte_end":93372,"line_start":128,"line_end":128,"column_start":5,"column_end":38}},{"value":"/ - If any of the segments are invalid Rust identifiers","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93377,"byte_end":93434,"line_start":129,"line_end":129,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94024,"byte_end":94032,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"segments","qualname":"<Path<T>>::segments","value":"pub fn segments(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Returns the segments of the Path\n","sig":null,"attributes":[{"value":"/ Returns the segments of the Path","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93976,"byte_end":94012,"line_start":149,"line_end":149,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94143,"byte_end":94151,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Path<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the path is empty\n","sig":null,"attributes":[{"value":"/ Returns `true` if the path is empty","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94092,"byte_end":94131,"line_start":154,"line_end":154,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94262,"byte_end":94267,"line_start":160,"line_end":160,"column_start":12,"column_end":17},"name":"ident","qualname":"<Path<T>>::ident","value":"pub fn ident(&Self) -> Option<T::String>","parent":null,"children":[],"decl_id":null,"docs":" Get the ident segment of the Path\n","sig":null,"attributes":[{"value":"/ Get the ident segment of the Path","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94213,"byte_end":94250,"line_start":159,"line_end":159,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94408,"byte_end":94417,"line_start":165,"line_end":165,"column_start":12,"column_end":21},"name":"namespace","qualname":"<Path<T>>::namespace","value":"pub fn namespace(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Get the namespace segments of the Path\n","sig":null,"attributes":[{"value":"/ Get the namespace segments of the Path","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94354,"byte_end":94396,"line_start":164,"line_end":164,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1845},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94707,"byte_end":94722,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"MissingSegments","qualname":"::ty::path::PathError::MissingSegments","value":"PathError::MissingSegments","parent":{"krate":0,"index":1844},"children":[],"decl_id":null,"docs":" If the module path does not at least have one segment.\n","sig":null,"attributes":[{"value":"/ If the module path does not at least have one segment.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94644,"byte_end":94702,"line_start":173,"line_end":173,"column_start":5,"column_end":63}}]},{"kind":"StructVariant","id":{"krate":0,"index":1847},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94803,"byte_end":94820,"line_start":176,"line_end":176,"column_start":5,"column_end":22},"name":"InvalidIdentifier","qualname":"::ty::path::PathError::InvalidIdentifier","value":"PathError::InvalidIdentifier { segment }","parent":{"krate":0,"index":1844},"children":[],"decl_id":null,"docs":" If a segment within a module path is not a proper Rust identifier.\n","sig":null,"attributes":[{"value":"/ If a segment within a module path is not a proper Rust identifier.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94728,"byte_end":94798,"line_start":175,"line_end":175,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":1844},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94628,"byte_end":94637,"line_start":172,"line_end":172,"column_start":10,"column_end":19},"name":"PathError","qualname":"::ty::path::PathError","value":"pub enum PathError {\n    MissingSegments,\n    InvalidIdentifier {\n            segment: usize,\n        },\n}","parent":null,"children":[{"krate":0,"index":1845},{"krate":0,"index":1847}],"decl_id":null,"docs":" An error that may be encountered upon constructing namespaces.\n","sig":null,"attributes":[{"value":"/ An error that may be encountered upon constructing namespaces.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":94520,"byte_end":94586,"line_start":170,"line_end":170,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1914},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":99339,"byte_end":99353,"line_start":85,"line_end":85,"column_start":12,"column_end":26},"name":"TypeDefVariant","qualname":"::ty::variant::TypeDefVariant","value":"TypeDefVariant {  }","parent":null,"children":[{"krate":0,"index":1953}],"decl_id":null,"docs":" A Enum type (consisting of variants).","sig":null,"attributes":[{"value":"/ A Enum type (consisting of variants).","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98130,"byte_end":98171,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98172,"byte_end":98175,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98176,"byte_end":98190,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98191,"byte_end":98194,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## A Rust enum, aka tagged union.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98195,"byte_end":98232,"line_start":40,"line_end":40,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98233,"byte_end":98236,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98237,"byte_end":98244,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ enum MyEnum {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98245,"byte_end":98262,"line_start":43,"line_end":43,"column_start":1,"column_end":18}},{"value":"/     RustAllowsForClikeVariants,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98263,"byte_end":98298,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     AndAlsoForTupleStructs(i32, bool),","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98299,"byte_end":98341,"line_start":45,"line_end":45,"column_start":1,"column_end":43}},{"value":"/     OrStructs {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98342,"byte_end":98361,"line_start":46,"line_end":46,"column_start":1,"column_end":20}},{"value":"/         with: i32,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98362,"byte_end":98384,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/         named: bool,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98385,"byte_end":98409,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"/         fields: [u8; 32],","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98410,"byte_end":98439,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/     },","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98440,"byte_end":98450,"line_start":50,"line_end":50,"column_start":1,"column_end":11}},{"value":"/     ItIsntPossibleToSetADiscriminantThough,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98451,"byte_end":98498,"line_start":51,"line_end":51,"column_start":1,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98499,"byte_end":98504,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98505,"byte_end":98512,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98513,"byte_end":98516,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ## A C-like enum type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98517,"byte_end":98543,"line_start":55,"line_end":55,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98544,"byte_end":98547,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98548,"byte_end":98555,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ enum Days {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98556,"byte_end":98571,"line_start":58,"line_end":58,"column_start":1,"column_end":16}},{"value":"/     Monday,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98572,"byte_end":98587,"line_start":59,"line_end":59,"column_start":1,"column_end":16}},{"value":"/     Tuesday,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98588,"byte_end":98604,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/     Wednesday,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98605,"byte_end":98623,"line_start":61,"line_end":61,"column_start":1,"column_end":19}},{"value":"/     Thursday = 42, // Allows setting the discriminant explicitly","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98624,"byte_end":98692,"line_start":62,"line_end":62,"column_start":1,"column_end":69}},{"value":"/     Friday,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98693,"byte_end":98708,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"/     Saturday,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98709,"byte_end":98726,"line_start":64,"line_end":64,"column_start":1,"column_end":18}},{"value":"/     Sunday,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98727,"byte_end":98742,"line_start":65,"line_end":65,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98743,"byte_end":98748,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98749,"byte_end":98756,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98757,"byte_end":98760,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ## An empty enum (for marker purposes)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98761,"byte_end":98803,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98804,"byte_end":98807,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98808,"byte_end":98815,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ enum JustAMarker {}","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98816,"byte_end":98839,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98840,"byte_end":98847,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":98950,"byte_end":99113,"line_start":77,"line_end":80,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":99147,"byte_end":99178,"line_start":82,"line_end":82,"column_start":31,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":99923,"byte_end":99926,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefVariant>::new","value":"pub fn new<I>(I) -> Self where I: IntoIterator<Item = Variant>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TypeDefVariant` with the given variants\n","sig":null,"attributes":[{"value":"/ Create a new `TypeDefVariant` with the given variants","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":99854,"byte_end":99911,"line_start":105,"line_end":105,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100201,"byte_end":100209,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"variants","qualname":"<TypeDefVariant<T>>::variants","value":"pub fn variants(&Self) -> &[Variant<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the variants of a variant type\n","sig":null,"attributes":[{"value":"/ Returns the variants of a variant type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100147,"byte_end":100189,"line_start":120,"line_end":120,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2016},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":101078,"byte_end":101085,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"Variant","qualname":"::ty::variant::Variant","value":"Variant {  }","parent":null,"children":[{"krate":0,"index":2018},{"krate":0,"index":2050},{"krate":0,"index":2019},{"krate":0,"index":2051}],"decl_id":null,"docs":" A struct enum variant with either named (struct) or unnamed (tuple struct)\n fields.","sig":null,"attributes":[{"value":"/ A struct enum variant with either named (struct) or unnamed (tuple struct)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100268,"byte_end":100346,"line_start":126,"line_end":126,"column_start":1,"column_end":79}},{"value":"/ fields.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100347,"byte_end":100358,"line_start":127,"line_end":127,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100359,"byte_end":100362,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100363,"byte_end":100376,"line_start":129,"line_end":129,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100377,"byte_end":100380,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100381,"byte_end":100388,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/ enum Operation {","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100389,"byte_end":100409,"line_start":132,"line_end":132,"column_start":1,"column_end":21}},{"value":"/     Zero,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100410,"byte_end":100423,"line_start":133,"line_end":133,"column_start":1,"column_end":14}},{"value":"/ //  ^^^^ this is a unit struct enum variant","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100424,"byte_end":100471,"line_start":134,"line_end":134,"column_start":1,"column_end":48}},{"value":"/     Add(i32, i32),","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100472,"byte_end":100494,"line_start":135,"line_end":135,"column_start":1,"column_end":23}},{"value":"/ //  ^^^^^^^^^^^^^ this is a tuple-struct enum variant","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100495,"byte_end":100552,"line_start":136,"line_end":136,"column_start":1,"column_end":58}},{"value":"/     Minus { source: i32 }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100553,"byte_end":100582,"line_start":137,"line_end":137,"column_start":1,"column_end":30}},{"value":"/ //  ^^^^^^^^^^^^^^^^^^^^^ this is a struct enum variant","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100583,"byte_end":100642,"line_start":138,"line_end":138,"column_start":1,"column_end":60}},{"value":"/ }","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100643,"byte_end":100648,"line_start":139,"line_end":139,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100649,"byte_end":100656,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100759,"byte_end":100922,"line_start":144,"line_end":147,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102601,"byte_end":102605,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"name":"name","qualname":"<Variant<T>>::name","value":"pub fn name(&Self) -> &T::String","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the variant.\n","sig":null,"attributes":[{"value":"/ Returns the name of the variant.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102553,"byte_end":102589,"line_start":208,"line_end":208,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102716,"byte_end":102722,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"fields","qualname":"<Variant<T>>::fields","value":"pub fn fields(&Self) -> &[Field<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the fields of the struct variant.\n","sig":null,"attributes":[{"value":"/ Returns the fields of the struct variant.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102659,"byte_end":102704,"line_start":213,"line_end":213,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102828,"byte_end":102833,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"index","qualname":"<Variant<T>>::index","value":"pub fn index(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the variant.\n","sig":null,"attributes":[{"value":"/ Returns the index of the variant.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102779,"byte_end":102816,"line_start":218,"line_end":218,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102936,"byte_end":102940,"line_start":224,"line_end":224,"column_start":12,"column_end":16},"name":"docs","qualname":"<Variant<T>>::docs","value":"pub fn docs(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Returns the documentation of the variant.\n","sig":null,"attributes":[{"value":"/ Returns the documentation of the variant.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102879,"byte_end":102924,"line_start":223,"line_end":223,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":2114},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":66621,"byte_end":66625,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"Type","qualname":"::ty::Type","value":"Type {  }","parent":null,"children":[{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152}],"decl_id":null,"docs":" A [`Type`] definition with optional metadata.\n","sig":null,"attributes":[{"value":"/ A [`Type`] definition with optional metadata.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":66080,"byte_end":66129,"line_start":53,"line_end":53,"column_start":1,"column_end":50}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":66232,"byte_end":66395,"line_start":57,"line_end":60,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":66429,"byte_end":66460,"line_start":62,"line_end":62,"column_start":31,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68348,"byte_end":68355,"line_start":123,"line_end":123,"column_start":12,"column_end":19},"name":"builder","qualname":"<Type>::builder","value":"pub fn builder() -> TypeBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a [`TypeBuilder`](`crate::build::TypeBuilder`) the public API for constructing a [`Type`]\n","sig":null,"attributes":[{"value":"/ Create a [`TypeBuilder`](`crate::build::TypeBuilder`) the public API for constructing a [`Type`]","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68236,"byte_end":68336,"line_start":122,"line_end":122,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68897,"byte_end":68901,"line_start":151,"line_end":151,"column_start":12,"column_end":16},"name":"path","qualname":"<Type<T>>::path","value":"pub fn path(&Self) -> &Path<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the path of the type\n","sig":null,"attributes":[{"value":"/ Returns the path of the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68853,"byte_end":68885,"line_start":150,"line_end":150,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":69016,"byte_end":69027,"line_start":156,"line_end":156,"column_start":12,"column_end":23},"name":"type_params","qualname":"<Type<T>>::type_params","value":"pub fn type_params(&Self) -> &[TypeParameter<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the generic type parameters of the type\n","sig":null,"attributes":[{"value":"/ Returns the generic type parameters of the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68953,"byte_end":69004,"line_start":155,"line_end":155,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":69147,"byte_end":69155,"line_start":161,"line_end":161,"column_start":12,"column_end":20},"name":"type_def","qualname":"<Type<T>>::type_def","value":"pub fn type_def(&Self) -> &TypeDef<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the definition of the type\n","sig":null,"attributes":[{"value":"/ Returns the definition of the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":69097,"byte_end":69135,"line_start":160,"line_end":160,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":69267,"byte_end":69271,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"docs","qualname":"<Type<T>>::docs","value":"pub fn docs(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Returns the documentation of the type\n","sig":null,"attributes":[{"value":"/ Returns the documentation of the type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":69214,"byte_end":69255,"line_start":165,"line_end":165,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2223},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":69782,"byte_end":69795,"line_start":182,"line_end":182,"column_start":12,"column_end":25},"name":"TypeParameter","qualname":"::ty::TypeParameter","value":"TypeParameter {  }","parent":null,"children":[{"krate":0,"index":2225},{"krate":0,"index":2259}],"decl_id":null,"docs":" A generic type parameter.\n","sig":null,"attributes":[{"value":"/ A generic type parameter.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":69325,"byte_end":69354,"line_start":171,"line_end":171,"column_start":1,"column_end":30}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":69457,"byte_end":69620,"line_start":175,"line_end":178,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70502,"byte_end":70505,"line_start":208,"line_end":208,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeParameter<T>>::new","value":"pub fn new(T::String, Option<T::Type>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`TypeParameter`].\n","sig":null,"attributes":[{"value":"/ Create a new [`TypeParameter`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70455,"byte_end":70490,"line_start":207,"line_end":207,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70689,"byte_end":70691,"line_start":215,"line_end":215,"column_start":12,"column_end":14},"name":"ty","qualname":"<TypeParameter<T>>::ty","value":"pub fn ty(&Self) -> Option<&T::Type>","parent":null,"children":[],"decl_id":null,"docs":" Get the type of the parameter.","sig":null,"attributes":[{"value":"/ Get the type of the parameter.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70591,"byte_end":70625,"line_start":212,"line_end":212,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70630,"byte_end":70633,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ `None` if the parameter is skipped.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70638,"byte_end":70677,"line_start":214,"line_end":214,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70803,"byte_end":70807,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"name","qualname":"<TypeParameter<T>>::name","value":"pub fn name(&Self) -> &T::String","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the parameter.\n","sig":null,"attributes":[{"value":"/ Get the name of the parameter.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70757,"byte_end":70791,"line_start":219,"line_end":219,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2383},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71917,"byte_end":71926,"line_start":250,"line_end":250,"column_start":5,"column_end":14},"name":"Composite","qualname":"::ty::TypeDef::Composite","value":"TypeDef::Composite(TypeDefComposite<T>)","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" A composite type (e.g. a struct or a tuple)\n","sig":null,"attributes":[{"value":"/ A composite type (e.g. a struct or a tuple)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71841,"byte_end":71888,"line_start":248,"line_end":248,"column_start":5,"column_end":52}},{"value":"codec(index = 0)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71893,"byte_end":71912,"line_start":249,"line_end":249,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2386},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72015,"byte_end":72022,"line_start":253,"line_end":253,"column_start":5,"column_end":12},"name":"Variant","qualname":"::ty::TypeDef::Variant","value":"TypeDef::Variant(TypeDefVariant<T>)","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" A variant type (e.g. an enum)\n","sig":null,"attributes":[{"value":"/ A variant type (e.g. an enum)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71953,"byte_end":71986,"line_start":251,"line_end":251,"column_start":5,"column_end":38}},{"value":"codec(index = 1)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71991,"byte_end":72010,"line_start":252,"line_end":252,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2389},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72122,"byte_end":72130,"line_start":256,"line_end":256,"column_start":5,"column_end":13},"name":"Sequence","qualname":"::ty::TypeDef::Sequence","value":"TypeDef::Sequence(TypeDefSequence<T>)","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" A sequence type with runtime known length.\n","sig":null,"attributes":[{"value":"/ A sequence type with runtime known length.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72047,"byte_end":72093,"line_start":254,"line_end":254,"column_start":5,"column_end":51}},{"value":"codec(index = 2)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72098,"byte_end":72117,"line_start":255,"line_end":255,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2392},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72234,"byte_end":72239,"line_start":259,"line_end":259,"column_start":5,"column_end":10},"name":"Array","qualname":"::ty::TypeDef::Array","value":"TypeDef::Array(TypeDefArray<T>)","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" An array type with compile-time known length.\n","sig":null,"attributes":[{"value":"/ An array type with compile-time known length.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72156,"byte_end":72205,"line_start":257,"line_end":257,"column_start":5,"column_end":54}},{"value":"codec(index = 3)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72210,"byte_end":72229,"line_start":258,"line_end":258,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2395},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72308,"byte_end":72313,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Tuple","qualname":"::ty::TypeDef::Tuple","value":"TypeDef::Tuple(TypeDefTuple<T>)","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" A tuple type.\n","sig":null,"attributes":[{"value":"/ A tuple type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72262,"byte_end":72279,"line_start":260,"line_end":260,"column_start":5,"column_end":22}},{"value":"codec(index = 4)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72284,"byte_end":72303,"line_start":261,"line_end":261,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2398},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72391,"byte_end":72400,"line_start":265,"line_end":265,"column_start":5,"column_end":14},"name":"Primitive","qualname":"::ty::TypeDef::Primitive","value":"TypeDef::Primitive(TypeDefPrimitive)","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" A Rust primitive type.\n","sig":null,"attributes":[{"value":"/ A Rust primitive type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72336,"byte_end":72362,"line_start":263,"line_end":263,"column_start":5,"column_end":31}},{"value":"codec(index = 5)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72367,"byte_end":72386,"line_start":264,"line_end":264,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2401},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72494,"byte_end":72501,"line_start":268,"line_end":268,"column_start":5,"column_end":12},"name":"Compact","qualname":"::ty::TypeDef::Compact","value":"TypeDef::Compact(TypeDefCompact<T>)","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" A type using the [`Compact`] encoding\n","sig":null,"attributes":[{"value":"/ A type using the [`Compact`] encoding","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72424,"byte_end":72465,"line_start":266,"line_end":266,"column_start":5,"column_end":46}},{"value":"codec(index = 6)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72470,"byte_end":72489,"line_start":267,"line_end":267,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2404},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72598,"byte_end":72609,"line_start":271,"line_end":271,"column_start":5,"column_end":16},"name":"BitSequence","qualname":"::ty::TypeDef::BitSequence","value":"TypeDef::BitSequence(TypeDefBitSequence<T>)","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" A type representing a sequence of bits.\n","sig":null,"attributes":[{"value":"/ A type representing a sequence of bits.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72526,"byte_end":72569,"line_start":269,"line_end":269,"column_start":5,"column_end":48}},{"value":"codec(index = 7)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72574,"byte_end":72593,"line_start":270,"line_end":270,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":2327},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71807,"byte_end":71814,"line_start":247,"line_end":247,"column_start":10,"column_end":17},"name":"TypeDef","qualname":"::ty::TypeDef","value":"pub enum TypeDef<T: Form = MetaForm> {\n    Composite(TypeDefComposite<T>),\n    Variant(TypeDefVariant<T>),\n    Sequence(TypeDefSequence<T>),\n    Array(TypeDefArray<T>),\n    Tuple(TypeDefTuple<T>),\n    Primitive(TypeDefPrimitive),\n    Compact(TypeDefCompact<T>),\n    BitSequence(TypeDefBitSequence<T>),\n}","parent":null,"children":[{"krate":0,"index":2383},{"krate":0,"index":2386},{"krate":0,"index":2389},{"krate":0,"index":2392},{"krate":0,"index":2395},{"krate":0,"index":2398},{"krate":0,"index":2401},{"krate":0,"index":2404}],"decl_id":null,"docs":" The possible types a SCALE encodable Rust value could have.","sig":null,"attributes":[{"value":"/ The possible types a SCALE encodable Rust value could have.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70859,"byte_end":70922,"line_start":225,"line_end":225,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70923,"byte_end":70926,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70927,"byte_end":70937,"line_start":227,"line_end":227,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70938,"byte_end":70941,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ In order to preserve backwards compatibility, variant indices are explicitly specified instead","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70942,"byte_end":71040,"line_start":229,"line_end":229,"column_start":1,"column_end":99}},{"value":"/ of depending on the default implicit ordering.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71041,"byte_end":71091,"line_start":230,"line_end":230,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71092,"byte_end":71095,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ When adding a new variant, it must be added at the end with an incremented index.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71096,"byte_end":71181,"line_start":232,"line_end":232,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71182,"byte_end":71185,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ When removing an existing variant, the rest of variant indices remain the same, and the removed","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71186,"byte_end":71285,"line_start":234,"line_end":234,"column_start":1,"column_end":100}},{"value":"/ index should not be reused.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71286,"byte_end":71317,"line_start":235,"line_end":235,"column_start":1,"column_end":32}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71420,"byte_end":71583,"line_start":239,"line_end":242,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":71617,"byte_end":71648,"line_start":244,"line_end":244,"column_start":31,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2503},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73929,"byte_end":73933,"line_start":303,"line_end":303,"column_start":5,"column_end":9},"name":"Bool","qualname":"::ty::TypeDefPrimitive::Bool","value":"TypeDefPrimitive::Bool","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `bool` type\n","sig":null,"attributes":[{"value":"/ `bool` type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73885,"byte_end":73900,"line_start":301,"line_end":301,"column_start":5,"column_end":20}},{"value":"codec(index = 0)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73905,"byte_end":73924,"line_start":302,"line_end":302,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2505},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73983,"byte_end":73987,"line_start":306,"line_end":306,"column_start":5,"column_end":9},"name":"Char","qualname":"::ty::TypeDefPrimitive::Char","value":"TypeDefPrimitive::Char","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `char` type\n","sig":null,"attributes":[{"value":"/ `char` type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73939,"byte_end":73954,"line_start":304,"line_end":304,"column_start":5,"column_end":20}},{"value":"codec(index = 1)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73959,"byte_end":73978,"line_start":305,"line_end":305,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2507},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74036,"byte_end":74039,"line_start":309,"line_end":309,"column_start":5,"column_end":8},"name":"Str","qualname":"::ty::TypeDefPrimitive::Str","value":"TypeDefPrimitive::Str","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `str` type\n","sig":null,"attributes":[{"value":"/ `str` type","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73993,"byte_end":74007,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"codec(index = 2)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74012,"byte_end":74031,"line_start":308,"line_end":308,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2509},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74082,"byte_end":74084,"line_start":312,"line_end":312,"column_start":5,"column_end":7},"name":"U8","qualname":"::ty::TypeDefPrimitive::U8","value":"TypeDefPrimitive::U8","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `u8`\n","sig":null,"attributes":[{"value":"/ `u8`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74045,"byte_end":74053,"line_start":310,"line_end":310,"column_start":5,"column_end":13}},{"value":"codec(index = 3)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74058,"byte_end":74077,"line_start":311,"line_end":311,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2511},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74128,"byte_end":74131,"line_start":315,"line_end":315,"column_start":5,"column_end":8},"name":"U16","qualname":"::ty::TypeDefPrimitive::U16","value":"TypeDefPrimitive::U16","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `u16`\n","sig":null,"attributes":[{"value":"/ `u16`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74090,"byte_end":74099,"line_start":313,"line_end":313,"column_start":5,"column_end":14}},{"value":"codec(index = 4)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74104,"byte_end":74123,"line_start":314,"line_end":314,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2513},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74175,"byte_end":74178,"line_start":318,"line_end":318,"column_start":5,"column_end":8},"name":"U32","qualname":"::ty::TypeDefPrimitive::U32","value":"TypeDefPrimitive::U32","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `u32`\n","sig":null,"attributes":[{"value":"/ `u32`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74137,"byte_end":74146,"line_start":316,"line_end":316,"column_start":5,"column_end":14}},{"value":"codec(index = 5)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74151,"byte_end":74170,"line_start":317,"line_end":317,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2515},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74222,"byte_end":74225,"line_start":321,"line_end":321,"column_start":5,"column_end":8},"name":"U64","qualname":"::ty::TypeDefPrimitive::U64","value":"TypeDefPrimitive::U64","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `u64`\n","sig":null,"attributes":[{"value":"/ `u64`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74184,"byte_end":74193,"line_start":319,"line_end":319,"column_start":5,"column_end":14}},{"value":"codec(index = 6)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74198,"byte_end":74217,"line_start":320,"line_end":320,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2517},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74270,"byte_end":74274,"line_start":324,"line_end":324,"column_start":5,"column_end":9},"name":"U128","qualname":"::ty::TypeDefPrimitive::U128","value":"TypeDefPrimitive::U128","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `u128`\n","sig":null,"attributes":[{"value":"/ `u128`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74231,"byte_end":74241,"line_start":322,"line_end":322,"column_start":5,"column_end":15}},{"value":"codec(index = 7)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74246,"byte_end":74265,"line_start":323,"line_end":323,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2519},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74355,"byte_end":74359,"line_start":327,"line_end":327,"column_start":5,"column_end":9},"name":"U256","qualname":"::ty::TypeDefPrimitive::U256","value":"TypeDefPrimitive::U256","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" 256 bits unsigned int (no rust equivalent)\n","sig":null,"attributes":[{"value":"/ 256 bits unsigned int (no rust equivalent)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74280,"byte_end":74326,"line_start":325,"line_end":325,"column_start":5,"column_end":51}},{"value":"codec(index = 8)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74331,"byte_end":74350,"line_start":326,"line_end":326,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2521},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74402,"byte_end":74404,"line_start":330,"line_end":330,"column_start":5,"column_end":7},"name":"I8","qualname":"::ty::TypeDefPrimitive::I8","value":"TypeDefPrimitive::I8","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `i8`\n","sig":null,"attributes":[{"value":"/ `i8`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74365,"byte_end":74373,"line_start":328,"line_end":328,"column_start":5,"column_end":13}},{"value":"codec(index = 9)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74378,"byte_end":74397,"line_start":329,"line_end":329,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2523},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74449,"byte_end":74452,"line_start":333,"line_end":333,"column_start":5,"column_end":8},"name":"I16","qualname":"::ty::TypeDefPrimitive::I16","value":"TypeDefPrimitive::I16","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `i16`\n","sig":null,"attributes":[{"value":"/ `i16`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74410,"byte_end":74419,"line_start":331,"line_end":331,"column_start":5,"column_end":14}},{"value":"codec(index = 10)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74424,"byte_end":74444,"line_start":332,"line_end":332,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2525},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74497,"byte_end":74500,"line_start":336,"line_end":336,"column_start":5,"column_end":8},"name":"I32","qualname":"::ty::TypeDefPrimitive::I32","value":"TypeDefPrimitive::I32","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `i32`\n","sig":null,"attributes":[{"value":"/ `i32`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74458,"byte_end":74467,"line_start":334,"line_end":334,"column_start":5,"column_end":14}},{"value":"codec(index = 11)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74472,"byte_end":74492,"line_start":335,"line_end":335,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2527},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74545,"byte_end":74548,"line_start":339,"line_end":339,"column_start":5,"column_end":8},"name":"I64","qualname":"::ty::TypeDefPrimitive::I64","value":"TypeDefPrimitive::I64","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `i64`\n","sig":null,"attributes":[{"value":"/ `i64`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74506,"byte_end":74515,"line_start":337,"line_end":337,"column_start":5,"column_end":14}},{"value":"codec(index = 12)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74520,"byte_end":74540,"line_start":338,"line_end":338,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2529},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74594,"byte_end":74598,"line_start":342,"line_end":342,"column_start":5,"column_end":9},"name":"I128","qualname":"::ty::TypeDefPrimitive::I128","value":"TypeDefPrimitive::I128","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" `i128`\n","sig":null,"attributes":[{"value":"/ `i128`","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74554,"byte_end":74564,"line_start":340,"line_end":340,"column_start":5,"column_end":15}},{"value":"codec(index = 13)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74569,"byte_end":74589,"line_start":341,"line_end":341,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2531},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74678,"byte_end":74682,"line_start":345,"line_end":345,"column_start":5,"column_end":9},"name":"I256","qualname":"::ty::TypeDefPrimitive::I256","value":"TypeDefPrimitive::I256","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" 256 bits signed int (no rust equivalent)\n","sig":null,"attributes":[{"value":"/ 256 bits signed int (no rust equivalent)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74604,"byte_end":74648,"line_start":343,"line_end":343,"column_start":5,"column_end":49}},{"value":"codec(index = 14)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74653,"byte_end":74673,"line_start":344,"line_end":344,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":2483},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73862,"byte_end":73878,"line_start":300,"line_end":300,"column_start":10,"column_end":26},"name":"TypeDefPrimitive","qualname":"::ty::TypeDefPrimitive","value":"pub enum TypeDefPrimitive {\n    Bool,\n    Char,\n    Str,\n    U8,\n    U16,\n    U32,\n    U64,\n    U128,\n    U256,\n    I8,\n    I16,\n    I32,\n    I64,\n    I128,\n    I256,\n}","parent":null,"children":[{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":2509},{"krate":0,"index":2511},{"krate":0,"index":2513},{"krate":0,"index":2515},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2523},{"krate":0,"index":2525},{"krate":0,"index":2527},{"krate":0,"index":2529},{"krate":0,"index":2531}],"decl_id":null,"docs":" A primitive Rust type.","sig":null,"attributes":[{"value":"/ A primitive Rust type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73450,"byte_end":73476,"line_start":291,"line_end":291,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73477,"byte_end":73480,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73481,"byte_end":73491,"line_start":293,"line_end":293,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73492,"byte_end":73495,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ Explicit codec indices specified to ensure backwards compatibility. See [`TypeDef`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73496,"byte_end":73584,"line_start":295,"line_end":295,"column_start":1,"column_end":89}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":73678,"byte_end":73709,"line_start":297,"line_end":297,"column_start":31,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2591},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74921,"byte_end":74933,"line_start":352,"line_end":352,"column_start":12,"column_end":24},"name":"TypeDefArray","qualname":"::ty::TypeDefArray","value":"TypeDefArray {  }","parent":null,"children":[{"krate":0,"index":2593},{"krate":0,"index":2624}],"decl_id":null,"docs":" An array type.\n","sig":null,"attributes":[{"value":"/ An array type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":74687,"byte_end":74705,"line_start":348,"line_end":348,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75493,"byte_end":75496,"line_start":373,"line_end":373,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefArray>::new","value":"pub fn new(u32, MetaType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new array type.\n","sig":null,"attributes":[{"value":"/ Creates a new array type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75452,"byte_end":75481,"line_start":372,"line_end":372,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75722,"byte_end":75725,"line_start":384,"line_end":384,"column_start":12,"column_end":15},"name":"len","qualname":"<TypeDefArray<T>>::len","value":"pub fn len(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the array type.\n","sig":null,"attributes":[{"value":"/ Returns the length of the array type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75669,"byte_end":75710,"line_start":383,"line_end":383,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75829,"byte_end":75839,"line_start":389,"line_end":389,"column_start":12,"column_end":22},"name":"type_param","qualname":"<TypeDefArray<T>>::type_param","value":"pub fn type_param(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the element type of the array type.\n","sig":null,"attributes":[{"value":"/ Returns the element type of the array type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75770,"byte_end":75817,"line_start":388,"line_end":388,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":2646},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76403,"byte_end":76415,"line_start":406,"line_end":406,"column_start":12,"column_end":24},"name":"TypeDefTuple","qualname":"::ty::TypeDefTuple","value":"TypeDefTuple {  }","parent":null,"children":[{"krate":0,"index":2648}],"decl_id":null,"docs":" A type to refer to tuple types.\n","sig":null,"attributes":[{"value":"/ A type to refer to tuple types.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75895,"byte_end":75930,"line_start":394,"line_end":394,"column_start":1,"column_end":36}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76033,"byte_end":76196,"line_start":398,"line_end":401,"column_start":5,"column_end":7}},{"value":"serde(transparent)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76230,"byte_end":76248,"line_start":403,"line_end":403,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76857,"byte_end":76860,"line_start":423,"line_end":423,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefTuple>::new","value":"pub fn new<T>(T) -> Self where T: IntoIterator<Item = MetaType>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new tuple type definition from the given types.\n","sig":null,"attributes":[{"value":"/ Creates a new tuple type definition from the given types.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76784,"byte_end":76845,"line_start":422,"line_end":422,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77192,"byte_end":77196,"line_start":436,"line_end":436,"column_start":12,"column_end":16},"name":"unit","qualname":"<TypeDefTuple>::unit","value":"pub fn unit() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit tuple to represent the unit type, `()`.\n","sig":null,"attributes":[{"value":"/ Creates a new unit tuple to represent the unit type, `()`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77118,"byte_end":77180,"line_start":435,"line_end":435,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77347,"byte_end":77353,"line_start":446,"line_end":446,"column_start":12,"column_end":18},"name":"fields","qualname":"<TypeDefTuple<T>>::fields","value":"pub fn fields(&Self) -> &[T::Type]","parent":null,"children":[],"decl_id":null,"docs":" Returns the types of the tuple fields.\n","sig":null,"attributes":[{"value":"/ Returns the types of the tuple fields.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77293,"byte_end":77335,"line_start":445,"line_end":445,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2739},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77686,"byte_end":77701,"line_start":455,"line_end":455,"column_start":12,"column_end":27},"name":"TypeDefSequence","qualname":"::ty::TypeDefSequence","value":"TypeDefSequence {  }","parent":null,"children":[{"krate":0,"index":2775}],"decl_id":null,"docs":" A type to refer to a sequence of elements of the same type.\n","sig":null,"attributes":[{"value":"/ A type to refer to a sequence of elements of the same type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77407,"byte_end":77470,"line_start":451,"line_end":451,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78288,"byte_end":78291,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefSequence>::new","value":"pub fn new(MetaType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new sequence type.","sig":null,"attributes":[{"value":"/ Creates a new sequence type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78156,"byte_end":78188,"line_start":472,"line_end":472,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78193,"byte_end":78196,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Use this constructor if you want to instantiate from a given meta type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78201,"byte_end":78276,"line_start":474,"line_end":474,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78511,"byte_end":78513,"line_start":483,"line_end":483,"column_start":12,"column_end":14},"name":"of","qualname":"<TypeDefSequence>::of","value":"pub fn of<T>() -> Self where T: TypeInfo + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a new sequence type.","sig":null,"attributes":[{"value":"/ Creates a new sequence type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78363,"byte_end":78395,"line_start":479,"line_end":479,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78400,"byte_end":78403,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Use this constructor if you want to instantiate from a given","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78408,"byte_end":78472,"line_start":481,"line_end":481,"column_start":5,"column_end":69}},{"value":"/ compile-time type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78477,"byte_end":78499,"line_start":482,"line_end":482,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78737,"byte_end":78747,"line_start":496,"line_end":496,"column_start":12,"column_end":22},"name":"type_param","qualname":"<TypeDefSequence<T>>::type_param","value":"pub fn type_param(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the element type of the sequence type.\n","sig":null,"attributes":[{"value":"/ Returns the element type of the sequence type.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78675,"byte_end":78725,"line_start":495,"line_end":495,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2832},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79053,"byte_end":79067,"line_start":505,"line_end":505,"column_start":12,"column_end":26},"name":"TypeDefCompact","qualname":"::ty::TypeDefCompact","value":"TypeDefCompact {  }","parent":null,"children":[{"krate":0,"index":2868}],"decl_id":null,"docs":" A type wrapped in [`Compact`].\n","sig":null,"attributes":[{"value":"/ A type wrapped in [`Compact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78803,"byte_end":78837,"line_start":501,"line_end":501,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79600,"byte_end":79603,"line_start":523,"line_end":523,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefCompact>::new","value":"pub fn new(MetaType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new type wrapped in [`Compact`].\n","sig":null,"attributes":[{"value":"/ Creates a new type wrapped in [`Compact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79542,"byte_end":79588,"line_start":522,"line_end":522,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79806,"byte_end":79816,"line_start":532,"line_end":532,"column_start":12,"column_end":22},"name":"type_param","qualname":"<TypeDefCompact<T>>::type_param","value":"pub fn type_param(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the [`Compact`] wrapped type, i.e. the `T` in `Compact<T>`.\n","sig":null,"attributes":[{"value":"/ Returns the [`Compact`] wrapped type, i.e. the `T` in `Compact<T>`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79723,"byte_end":79794,"line_start":531,"line_end":531,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2927},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":80340,"byte_end":80358,"line_start":546,"line_end":546,"column_start":12,"column_end":30},"name":"TypeDefBitSequence","qualname":"::ty::TypeDefBitSequence","value":"TypeDefBitSequence {  }","parent":null,"children":[{"krate":0,"index":2929},{"krate":0,"index":2930}],"decl_id":null,"docs":" Type describing a [`bitvec::vec::BitVec`].","sig":null,"attributes":[{"value":"/ Type describing a [`bitvec::vec::BitVec`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79872,"byte_end":79918,"line_start":537,"line_end":537,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79919,"byte_end":79922,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79923,"byte_end":79933,"line_start":539,"line_end":539,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79934,"byte_end":79937,"line_start":540,"line_end":540,"column_start":1,"column_end":4}},{"value":"/ This can only be constructed for `TypeInfo` in the `MetaForm` with the `bit-vec` feature","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79938,"byte_end":80030,"line_start":541,"line_end":541,"column_start":1,"column_end":93}},{"value":"/ enabled, but can be decoded or deserialized into the `PortableForm` without this feature.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":80031,"byte_end":80124,"line_start":542,"line_end":542,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":81063,"byte_end":81077,"line_start":569,"line_end":569,"column_start":12,"column_end":26},"name":"bit_order_type","qualname":"<TypeDefBitSequence<T>>::bit_order_type","value":"pub fn bit_order_type(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of the bit ordering of the [`::bitvec::vec::BitVec`].\n","sig":null,"attributes":[{"value":"/ Returns the type of the bit ordering of the [`::bitvec::vec::BitVec`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":80977,"byte_end":81051,"line_start":568,"line_end":568,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":81223,"byte_end":81237,"line_start":574,"line_end":574,"column_start":12,"column_end":26},"name":"bit_store_type","qualname":"<TypeDefBitSequence<T>>::bit_store_type","value":"pub fn bit_store_type(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns underlying type used to store the [`::bitvec::vec::BitVec`].\n","sig":null,"attributes":[{"value":"/ Returns underlying type used to store the [`::bitvec::vec::BitVec`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":81139,"byte_end":81211,"line_start":573,"line_end":573,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":934},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12415,"byte_end":12423,"line_start":362,"line_end":362,"column_start":11,"column_end":19},"name":"TypeInfo","qualname":"::TypeInfo","value":"TypeInfo","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936}],"decl_id":null,"docs":" Implementors return their meta type information.\n","sig":null,"attributes":[{"value":"/ Implementors return their meta type information.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12352,"byte_end":12404,"line_start":361,"line_end":361,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":935},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12796,"byte_end":12804,"line_start":370,"line_end":370,"column_start":10,"column_end":18},"name":"Identity","qualname":"::TypeInfo::Identity","value":"type Identity: ?Sized + 'static;","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" The type identifying for which type info is provided.","sig":null,"attributes":[{"value":"/ The type identifying for which type info is provided.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12430,"byte_end":12487,"line_start":363,"line_end":363,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12492,"byte_end":12495,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12500,"byte_end":12510,"line_start":365,"line_end":365,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12515,"byte_end":12518,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ This is used to uniquely identify a type via [`core::any::TypeId::of`]. In most cases it","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12523,"byte_end":12615,"line_start":367,"line_end":367,"column_start":5,"column_end":97}},{"value":"/ will just be `Self`, but can be used to unify different types which have the same encoded","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12620,"byte_end":12713,"line_start":368,"line_end":368,"column_start":5,"column_end":98}},{"value":"/ representation e.g. reference types `Box<T>`, `&T` and `&mut T`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12718,"byte_end":12786,"line_start":369,"line_end":369,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12887,"byte_end":12896,"line_start":373,"line_end":373,"column_start":8,"column_end":17},"name":"type_info","qualname":"::TypeInfo::type_info","value":"pub fn type_info() -> Type","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" Returns the static type identifier for `Self`.\n","sig":null,"attributes":[{"value":"/ Returns the static type identifier for `Self`.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12829,"byte_end":12879,"line_start":372,"line_end":372,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":937},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13277,"byte_end":13291,"line_start":383,"line_end":383,"column_start":11,"column_end":25},"name":"StaticTypeInfo","qualname":"::StaticTypeInfo","value":"StaticTypeInfo: TypeInfo + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convenience trait for implementors, combining `TypeInfo` and `'static` bounds.","sig":null,"attributes":[{"value":"/ Convenience trait for implementors, combining `TypeInfo` and `'static` bounds.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12911,"byte_end":12993,"line_start":376,"line_end":376,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12994,"byte_end":12997,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12998,"byte_end":13008,"line_start":378,"line_end":378,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13009,"byte_end":13012,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ Currently because of the `'static` constraint on [`std::any::TypeId::of`] (see [`MetaType`]),","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13013,"byte_end":13110,"line_start":380,"line_end":380,"column_start":1,"column_end":98}},{"value":"/ `TypeInfo` constraints must also be accompanied by a `'static` bound. This trait is useful to","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13111,"byte_end":13208,"line_start":381,"line_end":381,"column_start":1,"column_end":98}},{"value":"/ implementors so only a single constraint is required.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13209,"byte_end":13266,"line_start":382,"line_end":382,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":940},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13459,"byte_end":13468,"line_start":388,"line_end":388,"column_start":8,"column_end":17},"name":"meta_type","qualname":"::meta_type","value":"pub fn meta_type<T>() -> MetaType where T: ?Sized + TypeInfo + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns the runtime bridge to the types compile-time type information.\n","sig":null,"attributes":[{"value":"/ Returns the runtime bridge to the types compile-time type information.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13377,"byte_end":13451,"line_start":387,"line_end":387,"column_start":1,"column_end":75}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19665,"byte_end":19676,"line_start":161,"line_end":161,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19916,"byte_end":19927,"line_start":172,"line_end":172,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20248,"byte_end":20259,"line_start":184,"line_end":184,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20842,"byte_end":20853,"line_start":204,"line_end":204,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22043,"byte_end":22049,"line_start":245,"line_end":245,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22712,"byte_end":22725,"line_start":269,"line_end":269,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22872,"byte_end":22885,"line_start":278,"line_end":278,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":23233,"byte_end":23246,"line_start":293,"line_end":293,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":23625,"byte_end":23638,"line_start":307,"line_end":307,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24748,"byte_end":24760,"line_start":346,"line_end":346,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25038,"byte_end":25050,"line_start":358,"line_end":358,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25159,"byte_end":25171,"line_start":365,"line_end":365,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25538,"byte_end":25550,"line_start":378,"line_end":378,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":26418,"byte_end":26430,"line_start":408,"line_end":408,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27721,"byte_end":27733,"line_start":452,"line_end":452,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28186,"byte_end":28194,"line_start":471,"line_end":471,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29656,"byte_end":29670,"line_start":521,"line_end":521,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30384,"byte_end":30398,"line_start":547,"line_end":547,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31396,"byte_end":31410,"line_start":582,"line_end":582,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34080,"byte_end":34088,"line_start":65,"line_end":65,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34666,"byte_end":34678,"line_start":83,"line_end":83,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":39384,"byte_end":39387,"line_start":163,"line_end":163,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":39547,"byte_end":39555,"line_start":174,"line_end":174,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":39715,"byte_end":39721,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":40230,"byte_end":40236,"line_start":205,"line_end":205,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":40869,"byte_end":40872,"line_start":228,"line_end":228,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":41199,"byte_end":41207,"line_start":242,"line_end":242,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":41548,"byte_end":41556,"line_start":257,"line_end":257,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":41859,"byte_end":41862,"line_start":271,"line_end":271,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":42655,"byte_end":42661,"line_start":323,"line_end":323,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":42837,"byte_end":42848,"line_start":333,"line_end":333,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":43241,"byte_end":43248,"line_start":345,"line_end":345,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":43431,"byte_end":43436,"line_start":355,"line_end":355,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":43925,"byte_end":43939,"line_start":372,"line_end":372,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47171,"byte_end":47186,"line_start":57,"line_end":57,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47702,"byte_end":47708,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49595,"byte_end":49603,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49814,"byte_end":49822,"line_start":141,"line_end":141,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49892,"byte_end":49900,"line_start":147,"line_end":147,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53873,"byte_end":53881,"line_start":52,"line_end":52,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53984,"byte_end":53992,"line_start":58,"line_end":58,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54017,"byte_end":54025,"line_start":60,"line_end":60,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54161,"byte_end":54169,"line_start":66,"line_end":66,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54282,"byte_end":54290,"line_start":72,"line_end":72,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54422,"byte_end":54430,"line_start":81,"line_end":81,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54538,"byte_end":54546,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":58261,"byte_end":58269,"line_start":90,"line_end":90,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":58333,"byte_end":58341,"line_start":96,"line_end":96,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":60941,"byte_end":60957,"line_start":170,"line_end":170,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":61349,"byte_end":61365,"line_start":187,"line_end":187,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":62152,"byte_end":62164,"line_start":210,"line_end":210,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83851,"byte_end":83867,"line_start":82,"line_end":82,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":84103,"byte_end":84119,"line_start":92,"line_end":92,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":84372,"byte_end":84388,"line_start":104,"line_end":104,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88072,"byte_end":88077,"line_start":100,"line_end":100,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88483,"byte_end":88488,"line_start":113,"line_end":113,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89041,"byte_end":89046,"line_start":137,"line_end":137,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91753,"byte_end":91757,"line_start":66,"line_end":66,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91899,"byte_end":91903,"line_start":77,"line_end":77,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92131,"byte_end":92135,"line_start":87,"line_end":87,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92283,"byte_end":92287,"line_start":93,"line_end":93,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93943,"byte_end":93947,"line_start":145,"line_end":145,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":99583,"byte_end":99597,"line_start":94,"line_end":94,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":99833,"byte_end":99847,"line_start":104,"line_end":104,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100104,"byte_end":100118,"line_start":116,"line_end":116,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":101836,"byte_end":101843,"line_start":174,"line_end":174,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102202,"byte_end":102209,"line_start":187,"line_end":187,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102517,"byte_end":102524,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":67408,"byte_end":67412,"line_start":89,"line_end":89,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68225,"byte_end":68229,"line_start":121,"line_end":121,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68820,"byte_end":68824,"line_start":146,"line_end":146,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70112,"byte_end":70125,"line_start":192,"line_end":192,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70413,"byte_end":70426,"line_start":203,"line_end":203,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72659,"byte_end":72666,"line_start":274,"line_end":274,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75161,"byte_end":75173,"line_start":360,"line_end":360,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75433,"byte_end":75445,"line_start":371,"line_end":371,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75628,"byte_end":75640,"line_start":379,"line_end":379,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76528,"byte_end":76540,"line_start":411,"line_end":411,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76765,"byte_end":76777,"line_start":421,"line_end":421,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77252,"byte_end":77264,"line_start":441,"line_end":441,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77880,"byte_end":77895,"line_start":461,"line_end":461,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78134,"byte_end":78149,"line_start":471,"line_end":471,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78631,"byte_end":78646,"line_start":491,"line_end":491,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79270,"byte_end":79284,"line_start":511,"line_end":511,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79521,"byte_end":79535,"line_start":521,"line_end":521,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79680,"byte_end":79694,"line_start":527,"line_end":527,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":80582,"byte_end":80600,"line_start":553,"line_end":553,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":80930,"byte_end":80948,"line_start":564,"line_end":564,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13343,"byte_end":13344,"line_start":385,"line_end":385,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":11969,"byte_end":11976,"line_start":331,"line_end":331,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":11987,"byte_end":11992,"line_start":333,"line_end":333,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12002,"byte_end":12006,"line_start":334,"line_end":334,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":169}},{"kind":"Mod","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":12027,"byte_end":12035,"line_start":336,"line_end":336,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":386}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19665,"byte_end":19676,"line_start":161,"line_end":161,"column_start":21,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":19916,"byte_end":19927,"line_start":172,"line_end":172,"column_start":6,"column_end":17},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20248,"byte_end":20259,"line_start":184,"line_end":184,"column_start":6,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":20842,"byte_end":20853,"line_start":204,"line_end":204,"column_start":9,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22043,"byte_end":22049,"line_start":245,"line_end":245,"column_start":6,"column_end":12},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22712,"byte_end":22725,"line_start":269,"line_end":269,"column_start":21,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":86},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":22872,"byte_end":22885,"line_start":278,"line_end":278,"column_start":9,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":23233,"byte_end":23246,"line_start":293,"line_end":293,"column_start":6,"column_end":19},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":23625,"byte_end":23638,"line_start":307,"line_end":307,"column_start":6,"column_end":19},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":24748,"byte_end":24760,"line_start":346,"line_end":346,"column_start":24,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":108},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25038,"byte_end":25050,"line_start":358,"line_end":358,"column_start":6,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25159,"byte_end":25171,"line_start":365,"line_end":365,"column_start":9,"column_end":21},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":25538,"byte_end":25550,"line_start":378,"line_end":378,"column_start":9,"column_end":21},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":26418,"byte_end":26430,"line_start":408,"line_end":408,"column_start":12,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":27721,"byte_end":27733,"line_start":452,"line_end":452,"column_start":9,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":28186,"byte_end":28194,"line_start":471,"line_end":471,"column_start":6,"column_end":14},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":985},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":29656,"byte_end":29670,"line_start":521,"line_end":521,"column_start":6,"column_end":20},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":30384,"byte_end":30398,"line_start":547,"line_end":547,"column_start":9,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/build.rs","byte_start":31396,"byte_end":31410,"line_start":582,"line_end":582,"column_start":6,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34080,"byte_end":34088,"line_start":65,"line_end":65,"column_start":15,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3030},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/form.rs","byte_start":34666,"byte_end":34678,"line_start":83,"line_end":83,"column_start":23,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3014},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":39384,"byte_end":39387,"line_start":163,"line_end":163,"column_start":22,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":39547,"byte_end":39555,"line_start":174,"line_end":174,"column_start":22,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":5,"index":4173},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":39715,"byte_end":39721,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":2,"index":45974},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":40230,"byte_end":40236,"line_start":205,"line_end":205,"column_start":25,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":2,"index":46101},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":40869,"byte_end":40872,"line_start":228,"line_end":228,"column_start":22,"column_end":25},"kind":{"Impl":{"id":49}},"from":{"krate":5,"index":672},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":41199,"byte_end":41207,"line_start":242,"line_end":242,"column_start":25,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":5,"index":1392},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":41548,"byte_end":41556,"line_start":257,"line_end":257,"column_start":22,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":5,"index":7463},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":41859,"byte_end":41862,"line_start":271,"line_end":271,"column_start":22,"column_end":25},"kind":{"Impl":{"id":52}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":42655,"byte_end":42661,"line_start":323,"line_end":323,"column_start":19,"column_end":25},"kind":{"Impl":{"id":54}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":42837,"byte_end":42848,"line_start":333,"line_end":333,"column_start":22,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":2,"index":3042},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":43241,"byte_end":43248,"line_start":345,"line_end":345,"column_start":29,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":23,"index":2481},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":43431,"byte_end":43436,"line_start":355,"line_end":355,"column_start":24,"column_end":29},"kind":{"Impl":{"id":57}},"from":{"krate":2,"index":44475},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/impls.rs","byte_start":43925,"byte_end":43939,"line_start":372,"line_end":372,"column_start":24,"column_end":38},"kind":{"Impl":{"id":58}},"from":{"krate":2,"index":44544},"to":{"krate":0,"index":934}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47171,"byte_end":47186,"line_start":57,"line_end":57,"column_start":9,"column_end":24},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":47702,"byte_end":47708,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49595,"byte_end":49603,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49814,"byte_end":49822,"line_start":141,"line_end":141,"column_start":26,"column_end":34},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1478},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/interner.rs","byte_start":49892,"byte_end":49900,"line_start":147,"line_end":147,"column_start":9,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53873,"byte_end":53881,"line_start":52,"line_end":52,"column_start":20,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1482},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":53984,"byte_end":53992,"line_start":58,"line_end":58,"column_start":13,"column_end":21},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1482},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54017,"byte_end":54025,"line_start":60,"line_end":60,"column_start":21,"column_end":29},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1482},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54161,"byte_end":54169,"line_start":66,"line_end":66,"column_start":14,"column_end":22},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1482},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54282,"byte_end":54290,"line_start":72,"line_end":72,"column_start":15,"column_end":23},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1482},"to":{"krate":2,"index":9802}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54422,"byte_end":54430,"line_start":81,"line_end":81,"column_start":16,"column_end":24},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1482},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/meta_type.rs","byte_start":54538,"byte_end":54546,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":58261,"byte_end":58269,"line_start":90,"line_end":90,"column_start":18,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3002},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":58333,"byte_end":58341,"line_start":96,"line_end":96,"column_start":6,"column_end":14},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3002},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":60941,"byte_end":60957,"line_start":170,"line_end":170,"column_start":25,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2980},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":61349,"byte_end":61365,"line_start":187,"line_end":187,"column_start":6,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2980},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/registry.rs","byte_start":62152,"byte_end":62164,"line_start":210,"line_end":210,"column_start":6,"column_end":18},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2961},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":83851,"byte_end":83867,"line_start":82,"line_end":82,"column_start":23,"column_end":39},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1648},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":84103,"byte_end":84119,"line_start":92,"line_end":92,"column_start":6,"column_end":22},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/composite.rs","byte_start":84372,"byte_end":84388,"line_start":104,"line_end":104,"column_start":9,"column_end":25},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88072,"byte_end":88077,"line_start":100,"line_end":100,"column_start":23,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1750},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":88483,"byte_end":88488,"line_start":113,"line_end":113,"column_start":6,"column_end":11},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/fields.rs","byte_start":89041,"byte_end":89046,"line_start":137,"line_end":137,"column_start":9,"column_end":14},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91753,"byte_end":91757,"line_start":66,"line_end":66,"column_start":21,"column_end":25},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1807},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":91899,"byte_end":91903,"line_start":77,"line_end":77,"column_start":23,"column_end":27},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1807},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92131,"byte_end":92135,"line_start":87,"line_end":87,"column_start":18,"column_end":22},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1807},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":92283,"byte_end":92287,"line_start":93,"line_end":93,"column_start":6,"column_end":10},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/path.rs","byte_start":93943,"byte_end":93947,"line_start":145,"line_end":145,"column_start":9,"column_end":13},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":99583,"byte_end":99597,"line_start":94,"line_end":94,"column_start":23,"column_end":37},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1914},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":99833,"byte_end":99847,"line_start":104,"line_end":104,"column_start":6,"column_end":20},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":100104,"byte_end":100118,"line_start":116,"line_end":116,"column_start":9,"column_end":23},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":101836,"byte_end":101843,"line_start":174,"line_end":174,"column_start":23,"column_end":30},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2016},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102202,"byte_end":102209,"line_start":187,"line_end":187,"column_start":6,"column_end":13},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2016},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/variant.rs","byte_start":102517,"byte_end":102524,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2016},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":67408,"byte_end":67412,"line_start":89,"line_end":89,"column_start":23,"column_end":27},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2114},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68225,"byte_end":68229,"line_start":121,"line_end":121,"column_start":6,"column_end":10},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":68820,"byte_end":68824,"line_start":146,"line_end":146,"column_start":9,"column_end":13},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70112,"byte_end":70125,"line_start":192,"line_end":192,"column_start":23,"column_end":36},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2223},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":70413,"byte_end":70426,"line_start":203,"line_end":203,"column_start":9,"column_end":22},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":72659,"byte_end":72666,"line_start":274,"line_end":274,"column_start":23,"column_end":30},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2327},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75161,"byte_end":75173,"line_start":360,"line_end":360,"column_start":23,"column_end":35},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2591},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75433,"byte_end":75445,"line_start":371,"line_end":371,"column_start":6,"column_end":18},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":75628,"byte_end":75640,"line_start":379,"line_end":379,"column_start":9,"column_end":21},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76528,"byte_end":76540,"line_start":411,"line_end":411,"column_start":23,"column_end":35},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2646},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":76765,"byte_end":76777,"line_start":421,"line_end":421,"column_start":6,"column_end":18},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77252,"byte_end":77264,"line_start":441,"line_end":441,"column_start":9,"column_end":21},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":77880,"byte_end":77895,"line_start":461,"line_end":461,"column_start":23,"column_end":38},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2739},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78134,"byte_end":78149,"line_start":471,"line_end":471,"column_start":6,"column_end":21},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2739},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":78631,"byte_end":78646,"line_start":491,"line_end":491,"column_start":9,"column_end":24},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2739},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79270,"byte_end":79284,"line_start":511,"line_end":511,"column_start":23,"column_end":37},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2832},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79521,"byte_end":79535,"line_start":521,"line_end":521,"column_start":6,"column_end":20},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2832},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":79680,"byte_end":79694,"line_start":527,"line_end":527,"column_start":9,"column_end":23},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2832},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":80582,"byte_end":80600,"line_start":553,"line_end":553,"column_start":23,"column_end":41},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2927},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/ty/mod.rs","byte_start":80930,"byte_end":80948,"line_start":564,"line_end":564,"column_start":9,"column_end":27},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2927},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13293,"byte_end":13301,"line_start":383,"line_end":383,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":934},"to":{"krate":0,"index":937}},{"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.1/src/lib.rs","byte_start":13343,"byte_end":13344,"line_start":385,"line_end":385,"column_start":28,"column_end":29},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":939},"to":{"krate":0,"index":937}}]}